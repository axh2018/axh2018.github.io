<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>测试</title>
      <link href="posts/938d.html"/>
      <url>posts/938d.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>阿里云oss静态托管网站</title>
      <link href="posts/7d41.html"/>
      <url>posts/7d41.html</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>个人博客纯静态页面放服务器小题大作了，用GitHub pages速度又太慢，刚好找到了阿里云对象存储托管网站这个办法。阿里云oss按量计费：存储0.12元/GB，外网流出0.25元/GB。</p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>打开阿里云官网，找到<a href="https://www.aliyun.com/ss/?k=oss">https://www.aliyun.com/ss/?k=oss</a> oss服务，先开通oss。</p><p>开通完后创建一个bucket：</p><p><img src="https://matery.oss-cn-hangzhou.aliyuncs.com/pic/posts/ossweb/Snipaste2020-11-02-20-26-04.png"></p><p>bucket名字和地区自己选择，权限选择公共读，其他的默认就好了。</p><p><img src="https://matery.oss-cn-hangzhou.aliyuncs.com/pic/posts/ossweb/Snipaste2020-11-02-20-29-27.png"></p><p>bucket创建完成后，来到控制台，设置静态页面（访问<code>jaav.com.cn</code>映射到<code>jaav.com.cn/index.html</code>)</p><p><img src="https://matery.oss-cn-hangzhou.aliyuncs.com/pic/posts/ossweb/Snipaste2020-11-02-20-32-06.png"></p><p>静态页面这样设置即可：</p><p><img src="https://matery.oss-cn-hangzhou.aliyuncs.com/pic/posts/ossweb/Snipaste2020-11-02-20-35-04.png"></p><p>完成后保存；</p><p>紧接着就是绑定自己的域名了，控制台传输管理-&gt;域名管理-&gt;绑定域名。将自己的域名解析一个cname到这个oss地址就可以了。</p><p>还需要上传ssl证书，这里可以看我的上一篇文章&lt;nginx配置https&gt;，里面有申请ssl证书环节。</p><p>下载下图这个“其他”证书即可：</p><p><img src="https://matery.oss-cn-hangzhou.aliyuncs.com/pic/posts/ossweb/Snipaste2020-11-02-20-41-59.png"></p><p>下载完后解压，将.key和.pem文件用记事本打开，填入证书托管的公钥和私钥中。</p><p>这就大功告成了，上传hexo生成的public文件夹下的内容到你创建的bucket就可以了。</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> oss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用ipv6攻破校园网</title>
      <link href="posts/45b6.html"/>
      <url>posts/45b6.html</url>
      
        <content type="html"><![CDATA[<h2 id="由来"><a href="#由来" class="headerlink" title="由来"></a>由来</h2><p>学校校园网价格越来越贵，由此不得不萌生一些邪恶的想法，（最初这个想法是我同学告诉我的，居然真实可行！）学校校园网通过浏览器web验证，输入学号，密码即可上网。但是，意外的发现，连上校园网后，他自动会弹出浏览器，让我登录，我不登录，居然可以进入<code>ipv6</code>网站，例如：<a href="https://bt.byr.cn/index.php">https://bt.byr.cn/index.php</a> 北京邮电大学的<code>pt</code>站点，说明校园网在<code>ipv6</code>上并没有设置验证，连上了校园网不登录即可上<code>ipv6</code>网站！</p><p><img src="https://matery.oss-cn-hangzhou.aliyuncs.com/pic/posts/schoolnet/Snipaste2020-09-21-22-09-20.png"></p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>首先：校园网必须是通过浏览器web验证 + 并且没验证能上ipv6网站（例如前面提到的北邮pt站点）+ 一台有<code>ipv6</code>地址的服务器，没有这些条件请绕道。</p><p>温馨提示：最好选购一台海外的服务器，例如virmach或者hostmen. . . ，海外服务器基本上都会有一个ipv6地址，而且不另外收费，在国内的话，ipv6地址很难搞到，并且国内服务器带宽很低。</p><p>例如我这台华为云的服务器：</p><p>最低配置： 一核一g1M，公网ipv6地址需要自己申请，推荐海外服务器。</p><p><img src="https://matery.oss-cn-hangzhou.aliyuncs.com/pic/posts/schoolnet/Snipaste2020-09-21-22-23-27.png"></p><p><img src="https://matery.oss-cn-hangzhou.aliyuncs.com/pic/posts/schoolnet/Snipaste2020-09-21-22-24-19.png"></p><p>有了服务器之后，用putty或者windows自带的powershell先登录进去。注意：输入密码是不会显示****的，输完密码回车就可以了，另外你电脑第一次登录服务器会提示你不安全什么的，输入<code>yes</code>即可。</p><p><img src="https://matery.oss-cn-hangzhou.aliyuncs.com/pic/posts/schoolnet/Snipaste2020-09-21-22-29-42.png"></p><p>接下来就是安装<code>shadownsocksR</code>这个脚本了，其实就是用你的服务器做了个代理，转发<code>ipv6</code>流量，其他的没什么。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">wget</span> -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssr.sh <span class="token operator">&amp;&amp;</span> <span class="token function">chmod</span> +x ssr.sh <span class="token operator">&amp;&amp;</span> <span class="token function">bash</span> ssr.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个脚本我开始死活装不上，因为其中的一个1.8M依赖包一直下不下来，最后自己手动在我的电脑上下下来，再传到服务器里，手动编译安装，然后修改了下上面的脚本，才成功。海外的服务器下载应该蛮快的。</p><p>脚本下载完成后，会在你服务器安装<code>shadowsocksR</code>服务，你一直跟着他的提示来就好。</p><p>下面几张截图演示一下安装<code>shadowsocksR</code>服务（另一台服务器：</p><p>①安装<code>shadowsocksR</code></p><p><img src="https://matery.oss-cn-hangzhou.aliyuncs.com/pic/posts/schoolnet/Snipaste2020-11-02-19-25-34.png"></p><p>②设置端口和密码</p><p><img src="https://matery.oss-cn-hangzhou.aliyuncs.com/pic/posts/schoolnet/Snipaste2020-11-02-19-27-34.png"></p><p>③加密方式和 <code>auth_chain_a</code> 协议</p><p><img src="https://matery.oss-cn-hangzhou.aliyuncs.com/pic/posts/schoolnet/Snipaste2020-11-02-19-29-54.png"></p><p>④混淆插件和限速设置</p><p><img src="https://matery.oss-cn-hangzhou.aliyuncs.com/pic/posts/schoolnet/Snipaste2020-11-02-19-31-02.png"></p><p>⑤大功告成</p><p><img src="https://matery.oss-cn-hangzhou.aliyuncs.com/pic/posts/schoolnet/Snipaste2020-11-02-19-32-03.png"></p><p>关键一点：在服务器后台管理界面开放你自己设置的端口，我这里选择了10086端口。</p><p>安装完成后，会显示shadowsocksR服务端的具体信息：</p><p>到这里，服务端已经准备完成了，现在需要在自己的电脑上安装客户端，也就是<code>ShadowsocksR-win-4.9.2</code>这个软件，这就不提供安装包了，需要的自己去<code>github</code>找吧！</p><p>下载完ShadowsocksR-win-4.9.2这个软件，解压，打开4.0的小飞机</p><p><img src="https://matery.oss-cn-hangzhou.aliyuncs.com/pic/posts/schoolnet/Snipaste2020-09-21-22-45-59.png"></p><p>可以在右下角看到一个小飞机，单击它，填入你的<code>shadowsocksR</code>服务端的信息</p><p><img src="https://matery.oss-cn-hangzhou.aliyuncs.com/pic/posts/schoolnet/Snipaste2020-09-21-22-51-48.png"></p><p>重点：这个与我们平常用的是一样的，只不过在<code>服务器IP</code>那一栏，需要填服务器的<code>ipv6</code>地址</p><p>如果不知道怎么看服务器的ipv6地址的话，在服务器上输入<code>ifconfig</code>这个指令即可，<code>inet6</code>有两栏，一栏是内网<code>ipv6</code>地址，一栏是公网<code>ipv6</code>地址，我们需要的是公网地址，即数字开头的那栏。</p><p><img src="https://matery.oss-cn-hangzhou.aliyuncs.com/pic/posts/schoolnet/Snipaste2020-09-21-22-33-50.png"></p><p>填完信息后，右键小飞机，系统代理模式和代理规则全部选择全局，）PAC就不用管了</p><p><img src="https://matery.oss-cn-hangzhou.aliyuncs.com/pic/posts/schoolnet/Snipaste2020-09-21-22-57-48.png"></p><p>到此就结束了，如果没登陆校园网能上前面提到的北邮pt站点即代表成功了！</p><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>重要的事情说三遍：本文仅供学习参考！！！本文仅供学习参考！！！本文仅供学习参考！！！</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 校园网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring之ioc容器</title>
      <link href="posts/502d.html"/>
      <url>posts/502d.html</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><h3 id="什么是spring-framework"><a href="#什么是spring-framework" class="headerlink" title="什么是spring-framework"></a>什么是<code>spring-framework</code></h3><p><code>Spring</code>是分层的<code>JavaSE/EE</code>应用一站式的轻量级开源框架。以<code>ioc</code>（<code>Inverse of control</code>）控制反转和<code>Aop</code>（<code>Aspect Oriented Programming</code>）面向切面编程为核心 ,</p><ul><li><code>Spring </code>是一个开源应用框架，旨在降低应用程序开发的复杂度。</li><li>它是轻量级、松散耦合的。</li><li>它具有分层体系结构，允许用户选择组件，同时还为<code> J2EE</code> 应用程序开发提供了一个有凝聚力的框架。</li><li>它可以集成其他框架，如 <code>Structs</code>、<code>Hibernate</code>、<code>EJB</code> 等，所以又称为框架的框架。</li></ul><h3 id="相关jar包"><a href="#相关jar包" class="headerlink" title="相关jar包"></a>相关<code>jar</code>包</h3><ul><li><p><code>spring-core</code>是Spring的核心工具包</p></li><li><p><code>spring-cji</code>是核心包所需的依赖包，</p></li><li><p><code>spring-aop</code>：<code>Spring</code>的面向切面编程，提供<code>AOP</code>（面向切面编程）的实现</p></li><li><p><code>spring-beans</code>：<code>Spring IOC</code>的基础实现，包含访问配置文件、创建和管理<code>bean</code>等</p></li><li><p><code>spring-context</code>：在基础<code>IOC</code>功能上提供扩展服务，此外还提供许多企业级服务的支持，有邮件服务、任务调度、<code>JNDI</code>定位，<code>EJB</code>集成、远程访问、缓存以及多种视图层框架的支持</p></li><li><p><code>spring-expression</code>：<code>spring</code>表达式语言，就像EL表达式一样的东西</p></li><li><p><code>commons-logging</code>：这个是只是一个日志包</p></li></ul><p>看下面官网给的一张spring框架的结构图：</p><p><img src="https://matery.oss-cn-hangzhou.aliyuncs.com/pic/posts/springioc/Snipaste2020-08-20-19-46-26.png" alt="Spring 模块"></p><ul><li><p><code>Spring </code>核心容器</p><p> – 该层基本上是 <code>Spring Framework</code> 的核心。它包含以下模块：</p><ul><li><code>Spring Core</code></li><li><code>Spring Bean</code></li><li><code>SpEL (Spring Expression Language)</code></li><li><code>Spring Context</code></li></ul></li><li><p>数据访问/集成</p><p> – 该层提供与数据库交互的支持。它包含以下模块：</p><ul><li><code>DBC (Java DataBase Connectivity)</code></li><li><code>ORM (Object Relational Mapping)</code></li><li><code>OXM (Object XML Mappers)</code></li><li><code>JMS (Java Messaging Service)</code></li><li><code>Transaction</code></li></ul></li><li><p><code>Web</code></p><p> – 该层提供了创建 <code>Web </code>应用程序的支持。它包含以下模块：</p><ul><li><code>Web</code></li><li><code>Web – Servlet</code></li><li><code>Web – Socket</code></li><li><code>Web – Portlet</code></li></ul></li><li><p><code>AOP</code>– 该层支持面向切面编程</p></li><li><p><code>Instrumentation</code> – 该层为类检测和类加载器实现提供支持。</p></li><li><p><code>Test </code>– 该层为使用 <code>JUnit</code> 和 <code>TestNG </code>进行测试提供支持。</p></li><li><p>几个杂项模块:</p><ul><li><code>Messaging</code> – 该模块为 <code>STOMP</code> 提供支持。它还支持注解编程模型，该模型用于从<code> WebSocket</code> 客户端路由和处理<code>STOMP</code>消息。</li><li><code>Aspects</code> – 该模块为与 <code>AspectJ</code> 的集成提供支持。</li></ul></li></ul><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li><p>方便解耦，简化开发：<br><code>Spring</code>就是一个大工厂，可以将所有对象创建和依赖关系维护，交给Spring管理</p></li><li><p><code>AOP</code>编程的支持：<br><code>Spring</code>提供面向切面编程，可以方便的实现对程序进行权限拦截、运行监控等功能</p></li><li><p>声明式事务的支持：<br>只需要通过配置就可以完成对事务的管理，而无需手动编程</p></li><li><p>方便程序的测试：<br><code>Spring</code>对<code>Junit4</code>支持，可以通过注解方便的测试<code>Spring</code>程序</p></li><li><p>方便集成各种优秀框架：<br><code>Spring</code>不排斥各种优秀的开源框架，其内部提供了对各种优秀框架（如：<code>Struts</code>、<code>Hibernate</code>、<code>MyBatis</code>、<code>Quartz</code>等）的直接支持<br>6.降低JavaEE API的使用难度：<br><code>Spring </code>对<code>JavaEE</code>开发中非常难用的一些<code>API</code>（<code>JDBC</code>、<code>JavaMail</code>、远程调用等），都提供了封装，使这些<code>API</code>应用难度大大降低</p></li></ol><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ul><li><p><code>xml</code>配置</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hello<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.cherry.Students<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>spring<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//三种方式(第一种常用)</span><span class="token comment" spellcheck="true">//第一种立即创建对象，适合单例对象，从项目配置文件加载</span>ApplicationContext contexta <span class="token operator">=</span> <span class="token keyword">new</span><span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"spring-config.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第二种从磁盘任意位置加载</span>ApplicationContext contextb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileSystemXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"C:\\Users\\17598\\Desktop\\spring-config.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第三种半配置问价半注解的方式</span>ApplicationContext contextc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token string">"spring-config.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><p>注入</p><ol><li><p>构造器注入</p><p><code>spring</code>的<code>IOC</code>容器默认通过无参构造器去<code>new</code>对象</p><p> 当参数为非字符串类型时，在配置文件中需要制定类型，如果不指定类型一律按照字符串类型赋值。</p><p> 当参数类型不一致时，框架是按照字符串的类型进行查找的，因此需要在配置文件中制定是参数的位置。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 通过构造器参数索引方式依赖注入 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>helloBeanByIndex<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.lyc.cn.day04.HelloImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>小张<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 通过构造器参数类型方式依赖注入 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>helloBeanByType<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.lyc.cn.day04.HelloImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.lang.String<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>小李<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 通过构造器参数名称方式依赖注入 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>helloBeanByName<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.lyc.cn.day04.HelloImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>小王<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ul><ol start="2"><li><p><code>setter</code>注入</p><p><code>student</code>类</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Address address<span class="token punctuation">;</span>    <span class="token keyword">private</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> books<span class="token punctuation">;</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> hobbies<span class="token punctuation">;</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> card<span class="token punctuation">;</span>    <span class="token keyword">private</span> Set<span class="token operator">&lt;</span>String<span class="token operator">></span> games<span class="token punctuation">;</span>    <span class="token keyword">private</span> String wife<span class="token punctuation">;</span>    <span class="token keyword">private</span> Properties info<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>xml</code>配置</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.cherry.Address<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>江西<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hello<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.cherry.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--普通注入--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>spring<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--引用注入--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--数组注入--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>books<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>红楼梦<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>三国演义<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>西游记<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--list注入--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hobbies<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>听歌<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>打篮球<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--map注入--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>card<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>123<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>123<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--set注入--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>games<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>LOL<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>QQSpeed<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--null注入--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wife<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>null</span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--properties注入--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>props</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>学号<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>201826702013<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>性别<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>props</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>拓展方式，<code>p</code>和<code>c</code>标签注入</p><p>首先导入约束</p><p><code>p-namespace</code> : <code>xmlns:p="http://www.springframework.org/schema/p"</code></p><p><code>c-namespace</code> : <code>xmlns:c="http://www.springframework.org/schema/c"</code></p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--c命名空间,通过构造器注入--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.cherry.User<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">c:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>小陈<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">c:</span>age</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>18<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--p命名空间,直接注入属性的值--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.cherry.User<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">p:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>小王<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">p:</span>age</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>18<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>注解注入</p></li></ol><ul><li><p>注解配置</p><ul><li><p><code>@Component</code>，配置<code>bean</code>，注在类上</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>cherry<span class="token punctuation">.</span>module<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Value<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author Bryant */</span><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"cherry"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//注册为bean一定要有一个空的构造器</span>    <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>@Respository  dao层</li><li>@Service   service层</li><li>@Controller 控制层</li></ul></li><li><p><code>@Scoope("singleton") </code>单例模式 <code>prototype</code>原型模式，注在属性或者setter方法上</p></li></ul><ul><li><p><code>Java</code>配置</p><p>完全使用注解，不需要xml配置文件。</p><ul><li><p>@Configuration</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JavaConfig</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span> <span class="token comment" spellcheck="true">//方法的名字就是bean的id</span>    <span class="token keyword">public</span> User <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>@Import （导入另一个javaconfig）</p></li></ul></li></ul></li></ul><ul><li><p><code>bean</code>的作用域</p><table><thead><tr><th><code>Scope</code></th><th><code>Description</code></th></tr></thead><tbody><tr><td><a href="https://docs.spring.io/spring/docs/5.2.8.RELEASE/spring-framework-reference/core.html#beans-factory-scopes-singleton">singleton</a></td><td>(Default) Scopes a single bean definition to a single object instance for each Spring IoC container.</td></tr><tr><td><a href="https://docs.spring.io/spring/docs/5.2.8.RELEASE/spring-framework-reference/core.html#beans-factory-scopes-prototype">prototype</a></td><td>Scopes a single bean definition to any number of object instances.</td></tr><tr><td><a href="https://docs.spring.io/spring/docs/5.2.8.RELEASE/spring-framework-reference/core.html#beans-factory-scopes-request">request</a></td><td>Scopes a single bean definition to the lifecycle of a single HTTP request. That is, each HTTP request has its own instance of a bean created off the back of a single bean definition. Only valid in the context of a web-aware Spring <code>ApplicationContext</code>.</td></tr><tr><td><a href="https://docs.spring.io/spring/docs/5.2.8.RELEASE/spring-framework-reference/core.html#beans-factory-scopes-session">session</a></td><td>Scopes a single bean definition to the lifecycle of an HTTP <code>Session</code>. Only valid in the context of a web-aware Spring <code>ApplicationContext</code>.</td></tr><tr><td><a href="https://docs.spring.io/spring/docs/5.2.8.RELEASE/spring-framework-reference/core.html#beans-factory-scopes-application">application</a></td><td>Scopes a single bean definition to the lifecycle of a <code>ServletContext</code>. Only valid in the context of a web-aware Spring <code>ApplicationContext</code>.</td></tr><tr><td><a href="https://docs.spring.io/spring/docs/5.2.8.RELEASE/spring-framework-reference/web.html#websocket-stomp-websocket-scope">websocket</a></td><td>Scopes a single bean definition to the lifecycle of a <code>WebSocket</code>. Only valid in the context of a web-aware Spring <code>ApplicationContext</code>.</td></tr></tbody></table><p><img src="https://matery.oss-cn-hangzhou.aliyuncs.com/pic/posts/springioc/Snipaste2020-08-20-19-47-53.png"></p><p>(1)当一个bean的作用域为Singleton，那么Spring IoC容器中只会存在一个共享的bean实例，并且所有对bean的请求，只要id与该bean定义相匹配，则只会返回bean的同一实例。Singleton是单例类型，就是在创建起容器时就同时自动创建了一个bean的对象，不管你是否使用，他都存在了，每次获取到的对象都是同一个对象。注意，Singleton作用域是Spring中的缺省作用域。要在XML中将bean定义成singleton，可以这样配置：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ServiceImpl<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cn.csdn.service.ServiceImpl<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>singleton<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p>　　(2)当一个bean的作用域为Prototype，表示一个bean定义对应多个对象实例。Prototype作用域的bean会导致在每次对该bean请求（将其注入到另一个bean中，或者以程序的方式调用容器的getBean()方法）时都会创建一个新的bean实例。Prototype是原型类型，它在我们创建容器的时候并没有实例化，而是当我们获取bean的时候才会去创建一个对象，而且我们每次获取到的对象都不是同一个对象。根据经验，对有状态的bean应该使用prototype作用域，而对无状态的bean则应该使用singleton作用域。在XML中将bean定义成prototype，可以这样配置：</p><pre class="line-numbers language-xml"><code class="language-xml">   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>account<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.foo.DefaultAccount<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prototype<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    或者<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>account<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.foo.DefaultAccount<span class="token punctuation">"</span></span> <span class="token attr-name">singleton</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>   　　</p><p>   　　(3)当一个bean的作用域为Request，表示在一次HTTP请求中，一个bean定义对应一个实例；即每个HTTP请求都会有各自的bean实例，它们依据某个bean定义创建而成。该作用域仅在基于web的Spring ApplicationContext情形下有效。考虑下面bean定义：</p><pre class="line-numbers language-xml"><code class="language-xml">&lt;bean id="loginAction" class="cn".csdn.LoginAction" scope="request"/><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    </p><p>　　针对每次HTTP请求，Spring容器会根据loginAction bean的定义创建一个全新的LoginAction bean实例，且该loginAction bean实例仅在当前HTTP request内有效，因此可以根据需要放心的更改所建实例的内部状态，而其他请求中根据loginAction bean定义创建的实例，将不会看到这些特定于某个请求的状态变化。当处理请求结束，request作用域的bean实例将被销毁。</p><p>　　(4)当一个bean的作用域为Session，表示在一个HTTP Session中，一个bean定义对应一个实例。该作用域仅在基于web的Spring ApplicationContext情形下有效。考虑下面bean定义：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userPreferences<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.foo.UserPreferences<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>session<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>　　针对某个HTTP Session，Spring容器会根据userPreferences bean定义创建一个全新的userPreferences  bean实例，且该userPreferences bean仅在当前HTTP Session内有效。与request作用域一样，可以根据需要放心的更改所创建实例的内部状态，而别的HTTP Session中根据userPreferences创建的实例，将不会看到这些特定于某个HTTP Session的状态变化。当HTTP Session最终被废弃的时候，在该HTTP Session作用域内的bean也会被废弃掉。</p><p>   　　(5)当一个bean的作用域为Global Session，表示在一个全局的HTTP Session中，一个bean定义对应一个实例。典型情况下，仅在使用portlet  context的时候有效。该作用域仅在基于web的Spring ApplicationContext情形下有效。考虑下面bean定义：</p><pre class="line-numbers language-xml"><code class="language-xml">&lt;bean id="user" class="com.foo.Preferences "scope="globalSession"/><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>   global session作用域类似于标准的HTTP  Session作用域，不过仅仅在基于portlet的web应用中才有意义。Portlet规范定义了全局Session的概念，它被所有构成某个portlet web应用的各种不同的portlet所共享。在global session作用域中定义的bean被限定于全局portlet  Session的生命周期范围内。</p><p>bean的自动装配</p><ul><li><p>spring的装配方式</p><ol><li>xml显示配置</li><li>java中显示配置</li><li>隐式的自动装配bean</li></ol></li><li><p>自动装配（引用类型）</p><ul><li>ByName</li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--byName：会自动在容器上下文中查找，和自己对象set方法后面的值对应的beanid！--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cat<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.cherry.pojo.Cat<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dog<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.cherry.pojo.Dog<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>people<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.cherry.pojo.People<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>byName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xiaohong<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>ByType</li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cat<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.cherry.pojo.Cat<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dog<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.cherry.pojo.Dog<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>people<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.cherry.pojo.People<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>byType<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xiaohong<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>constructor</p></li><li><p>将ioc容器中的所有bean自动装配</p><p>头文件中加 default-autowired =”byName”</p><p>子标签bean可以覆盖这个自动装配</p></li></ul><p>byname的时候，需要保证所有bean的id唯一，并且这个bean需要和注入的属性的set方法的值一致</p><p>bytype的时候，需要保证所有bean的class唯一，并且这个bean需要和注入的属性的类型一致</p><ul><li>注解自动装配</li></ul><ol><li><p>导入约束和对注解的支持</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans      https://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context      https://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>annotation-config</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>@Autowired</code></p><p>参考：<a href="http://blinkfox.com/2018/09/17/hou-duan/spring/spring-ji-chu-jie-shao/">http://blinkfox.com/2018/09/17/hou-duan/spring/spring-ji-chu-jie-shao/</a></p></li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell脚本基础</title>
      <link href="posts/1b2.html"/>
      <url>posts/1b2.html</url>
      
        <content type="html"><![CDATA[<h2 id="01-Shell脚本学习–入门"><a href="#01-Shell脚本学习–入门" class="headerlink" title="01- Shell脚本学习–入门"></a>01- Shell脚本学习–入门</h2><p><strong>注：本文代码块中有大括号的地方都加了反引号，不加反引号hexo渲染会报错，请注意识别！</strong></p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote><p>Shell是一种脚本语言，那么，就必须有解释器来执行这些脚本。</p></blockquote><p>Unix/Linux上常见的Shell脚本解释器有bash、sh、csh、ksh等，习惯上把它们称作一种Shell。我们常说有多少种Shell，其实说的是Shell脚本解释器。</p><h3 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h3><p>打开文本编辑器，新建一个文件<code>test.sh</code>，扩展名为<code>.sh</code>（sh代表shell）。</p><p>输入一些代码：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">echo</span> <span class="token string">"Hello World !"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在命令行运行：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">chmod</span> +x test.sh./test.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-txt"><code class="language-txt">Hello World !<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>#!</code> 是一个约定的标记，它告诉系统这个脚本需要什么解释器来执行，即<strong>使用哪一种Shell</strong>。<code>echo</code>命令用于向窗口输出文本。</p><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>以<code>#</code>开头的行就是注释，会被解释器忽略。sh里没有多行注释，只能每一行加一个#号。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># --------</span><span class="token comment" spellcheck="true"># 这是注释块</span><span class="token comment" spellcheck="true"># --------</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="打印输出"><a href="#打印输出" class="headerlink" title="打印输出"></a>打印输出</h3><p><strong>echo</strong>： 是Shell的一个内部指令，用于在屏幕上打印出指定的字符串。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">echo</span> arg <span class="token keyword">echo</span> -e arg <span class="token comment" spellcheck="true">#执行arg里的转义字符。echo加了-e默认会换行</span><span class="token keyword">echo</span> arg <span class="token operator">></span> myfile <span class="token comment" spellcheck="true">#显示结果重定向至文件，会生成myfile文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注意，echo后单引号和双引号作用是不同的。单引号不能转义里面的字符。双引号可有可无，单引号主要用在原样输出中。</p><p><strong>printf</strong>：格式化输出语句。<br><code>printf</code> 命令用于格式化输出， 是<code>echo</code>命令的增强版。它是C语言<code>printf()</code>库函数的一个有限的变形，并且在语法上有些不同。</p><p>如同 <code>echo</code> 命令，<code>printf</code> 命令也可以输出简单的字符串:</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">printf</span> <span class="token string">"hello\n"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>printf</code> 不像 <code>echo</code> 那样会自动换行，必须显式添加换行符(\n)。</p><p>注意：<code>printf</code> 由 POSIX 标准所定义，移植性要比 <code>echo</code> 好。</p><p>printf 命令的语法：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">printf</span>  format-string  <span class="token punctuation">[</span>arguments<span class="token punctuation">..</span>.<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#format-string 为格式控制字符串，arguments 为参数列表。功能和用法与c语言的 printf 命令类似。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这里仅说明与C语言printf()函数的不同：</p><ul><li>printf 命令不用加括号</li><li>format-string 可以没有引号，但最好加上，单引号双引号均可。</li><li>参数比格式控制符(%)多时，格式控制符可以重用，可以将所有参数都转换。</li><li>arguments 使用空格分隔，不用逗号。</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 双引号</span><span class="token function">printf</span> <span class="token string">"%d %s\n"</span> 10 <span class="token string">"abc"</span>10 abc<span class="token comment" spellcheck="true"># 单引号与双引号效果一样 </span><span class="token function">printf</span> <span class="token string">'%d %s\n'</span> 10 <span class="token string">"abc"</span> 10 abc<span class="token comment" spellcheck="true"># 没有引号也可以输出</span><span class="token function">printf</span> %s abcabc<span class="token comment" spellcheck="true"># 但是下面的会出错：</span><span class="token function">printf</span> %d %s 10 abc <span class="token comment" spellcheck="true">#因为系统分不清楚哪个是参数，这时候最好加引号了。</span><span class="token comment" spellcheck="true"># 格式只指定了一个参数，但多出的参数仍然会按照该格式输出，format-string 被重用</span>$ <span class="token function">printf</span> %s a b cabc$ <span class="token function">printf</span> <span class="token string">"%s\n"</span> a b cabc<span class="token comment" spellcheck="true"># 如果没有 arguments，那么 %s 用NULL代替，%d 用 0 代替</span>$ <span class="token function">printf</span> <span class="token string">"%s and %d \n"</span> and 0<span class="token comment" spellcheck="true"># 如果以 %d 的格式来显示字符串，那么会有警告，提示无效的数字，此时默认置为 0</span>$ <span class="token function">printf</span> <span class="token string">"The first program always prints'%s,%d\n'"</span> Hello Shell-bash: printf: Shell: invalid numberThe first program always prints <span class="token string">'Hello,0'</span>$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>read</strong>： 命令行从输入设备读入内容</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment" spellcheck="true"># Author : lalal</span><span class="token keyword">echo</span> <span class="token string">"What is your name?"</span><span class="token function">read</span> NAME <span class="token comment" spellcheck="true">#输入</span><span class="token keyword">echo</span> <span class="token string">"Hello, <span class="token variable">$NAME</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行脚本：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">chmod</span> +x test.sh./test.shWhat is your name?lalalHello, lalal<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="变量定义"><a href="#变量定义" class="headerlink" title="变量定义"></a>变量定义</h3><p>Shell支持自定义变量。</p><h3 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h3><p>定义变量时，变量名不加美元符号（$），如：</p><pre class="line-numbers language-bash"><code class="language-bash">variableName<span class="token operator">=</span><span class="token string">"value"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意，<strong>变量名和等号之间不能有空格</strong>，这可能和你熟悉的所有编程语言都不一样。有空格会出错。</p><p>同时，变量名的命名须遵循如下规则：</p><blockquote><ul><li>首个字符必须为字母（a-z，A-Z）。</li></ul></blockquote><ul><li>中间不能有空格，可以使用下划线（_）。</li><li>不能使用标点符号。</li><li>不能使用bash里的关键字（可用help命令查看保留关键字）。</li></ul><p>变量定义举例：</p><pre class="line-numbers language-bash"><code class="language-bash">myUrl<span class="token operator">=</span><span class="token string">"lalal"</span>myNum<span class="token operator">=</span>100<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>注意：变量中间不能有空格，如果手误写错(例如 <code>var = test</code>)，刚好要使用<code>rm -rf $var/</code>删除这个目录，实际删除的是<code>/</code>！</p></blockquote><h3 id="使用变量"><a href="#使用变量" class="headerlink" title="使用变量"></a>使用变量</h3><p>使用一个定义过的变量，只要在变量名前面加美元符号（$）即可，如：</p><pre class="line-numbers language-bash"><code class="language-bash">your_name<span class="token operator">=</span><span class="token string">"lalal"</span><span class="token keyword">echo</span> <span class="token variable">$your_name</span><span class="token keyword">echo</span> $<span class="token variable"><span class="token variable">`</span><span class="token punctuation">{</span>your_name<span class="token punctuation">}</span><span class="token variable">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>变量名外面的花括号是可选的</strong>，加不加都行，加花括号是为了帮助解释器识别变量的边界，比如下面这种情况：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">for</span> skill <span class="token keyword">in</span> C PHP Python Java <span class="token keyword">do</span>    <span class="token keyword">echo</span> <span class="token string">"I am good at $<span class="token variable"><span class="token variable">`</span><span class="token punctuation">{</span>skill<span class="token punctuation">}</span><span class="token variable">`</span></span>Script"</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果不给skill变量加花括号，写成<code>echo "I am good at $skillScript"</code>，解释器就会把<code>$skillScript</code>当成一个变量（其值为空），代码执行结果就不是我们期望的样子了。</p><p><strong>推荐给所有变量加上花括号，这是个好的编程习惯。</strong></p><blockquote><p>已定义的变量，可以被重新定义。</p></blockquote><p>在变量前面加<code>readonly</code> 命令可以将变量定义为只读变量，只读变量的值不能被改变。</p><pre class="line-numbers language-bash"><code class="language-bash">url<span class="token operator">=</span><span class="token string">"http://www.baidu.com"</span><span class="token function">readonly</span> urlurl<span class="token operator">=</span><span class="token string">"http://www.baidu.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用 <code>unset</code> 命令可以删除变量。语法：</p><pre class="line-numbers language-bash"><code class="language-bash">unset variable_name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>变量被删除后不能再次使用；unset 命令不能删除只读变量。</p><h3 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h3><p>运行shell时，会同时存在三种变量：<br><strong>1) 局部变量</strong><br>局部变量在脚本或命令中定义，仅在当前shell实例中有效，其他shell启动的程序不能访问局部变量。</p><p><strong>2) 环境变量</strong><br>所有的程序，包括shell启动的程序，都能访问环境变量，有些程序需要环境变量来保证其正常运行。必要的时候shell脚本也可以定义环境变量。</p><p><strong>3) shell变量</strong><br>shell变量是由shell程序设置的特殊变量。shell变量中有一部分是环境变量，有一部分是局部变量，这些变量保证了shell的正常运行。</p><h3 id="特殊变量"><a href="#特殊变量" class="headerlink" title="特殊变量"></a>特殊变量</h3><p>前面已经讲到，<strong>变量名只能包含数字、字母和下划线</strong>，因为某些包含其他字符的变量有特殊含义，这样的变量被称为<strong>特殊变量</strong>。</p><table><thead><tr><th>变量</th><th>含义</th></tr></thead><tbody><tr><td><code>$0</code></td><td>当前脚本的文件名</td></tr><tr><td><code>$n</code></td><td>传递给脚本或函数的参数。n 是一个数字，表示第几个参数。例如，第一个参数是<code>$1</code>，第二个参数是<code>$2</code>。</td></tr><tr><td><code>$#</code></td><td>传递给脚本或函数的参数个数。</td></tr><tr><td><code>$*</code></td><td>传递给脚本或函数的所有参数。</td></tr><tr><td><code>$@</code></td><td>传递给脚本或函数的所有参数。被双引号(“ “)包含时，与 <code>$*</code> 稍有不同</td></tr><tr><td><code>$?</code></td><td>上个命令的退出状态，或函数的返回值。</td></tr><tr><td><code>$$</code></td><td>当前Shell进程ID。对于 Shell 脚本，就是这些脚本所在的进程ID。</td></tr></tbody></table><p>示例：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">echo</span> <span class="token string">"File Name: <span class="token variable">$0</span>"</span><span class="token keyword">echo</span> <span class="token string">"First Parameter : <span class="token variable">$1</span>"</span><span class="token keyword">echo</span> <span class="token string">"Second Parameter : <span class="token variable">$2</span>"</span><span class="token keyword">echo</span> <span class="token string">"Quoted Values: <span class="token variable">$@</span>"</span><span class="token keyword">echo</span> <span class="token string">"Quoted Values: <span class="token variable">$*</span>"</span><span class="token keyword">echo</span> <span class="token string">"Total Number of Parameters : <span class="token variable">$#</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-bash"><code class="language-bash">$./test.sh Zara AliFile Name <span class="token keyword">:</span> ./test.shFirst Parameter <span class="token keyword">:</span> ZaraSecond Parameter <span class="token keyword">:</span> AliQuoted Values: Zara AliQuoted Values: Zara AliTotal Number of Parameters <span class="token keyword">:</span> 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="和-的区别"><a href="#和-的区别" class="headerlink" title="$* 和 $@ 的区别"></a><code>$*</code> 和 <code>$@</code> 的区别</h3><p><code>$*</code> 和 <code>$@</code> 都表示传递给函数或脚本的所有参数，不被双引号(“ “)包含时，都以<code>"$1" "$2" … "$n"</code> 的形式输出所有参数。</p><p>但是当它们被双引号(“ “)包含时，”<code>$*</code>“ 会将所有的参数作为一个整体，以”<code>$1 $2 … $n</code>“的形式输出所有参数；”<code>$@</code>“ 会将各个参数分开，以<code>"$1" "$2" … "$n"</code> 的形式输出所有参数。</p><p>示例：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">echo</span> <span class="token string">"\<span class="token variable">$*</span>="</span> <span class="token variable">$*</span><span class="token keyword">echo</span> <span class="token string">"\"\<span class="token variable">$*</span>\"="</span> <span class="token string">"<span class="token variable">$*</span>"</span><span class="token keyword">echo</span> <span class="token string">"\<span class="token variable">$@</span>="</span> <span class="token variable">$@</span><span class="token keyword">echo</span> <span class="token string">"\"\<span class="token variable">$@</span>\"="</span> <span class="token string">"<span class="token variable">$@</span>"</span><span class="token keyword">echo</span> <span class="token string">"print each param from \<span class="token variable">$*</span>"</span><span class="token keyword">for</span> var <span class="token keyword">in</span> <span class="token variable">$*</span><span class="token keyword">do</span>    <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$var</span>"</span><span class="token keyword">done</span><span class="token keyword">echo</span> <span class="token string">"print each param from \<span class="token variable">$@</span>"</span><span class="token keyword">for</span> var <span class="token keyword">in</span> <span class="token variable">$@</span><span class="token keyword">do</span>    <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$var</span>"</span><span class="token keyword">done</span><span class="token keyword">echo</span> <span class="token string">"print each param from \"\<span class="token variable">$*</span>\""</span><span class="token keyword">for</span> var <span class="token keyword">in</span> <span class="token string">"<span class="token variable">$*</span>"</span><span class="token keyword">do</span>    <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$var</span>"</span><span class="token keyword">done</span><span class="token keyword">echo</span> <span class="token string">"print each param from \"\<span class="token variable">$@</span>\""</span><span class="token keyword">for</span> var <span class="token keyword">in</span> <span class="token string">"<span class="token variable">$@</span>"</span><span class="token keyword">do</span>    <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$var</span>"</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行 <code>./test.sh "a" "b" "c" "d"</code>，看到下面的结果：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token variable">$*</span><span class="token operator">=</span>  a b c d<span class="token string">"<span class="token variable">$*</span>"</span><span class="token operator">=</span> a b c d<span class="token variable">$@</span><span class="token operator">=</span>  a b c d<span class="token string">"<span class="token variable">$@</span>"</span><span class="token operator">=</span> a b c dprint each param from <span class="token variable">$*</span>abcdprint each param from <span class="token variable">$@</span>abcdprint each param from <span class="token string">"<span class="token variable">$*</span>"</span>a b c dprint each param from <span class="token string">"<span class="token variable">$@</span>"</span>abcd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="退出状态"><a href="#退出状态" class="headerlink" title="退出状态"></a>退出状态</h3><p><code>$?</code> 可以获取上一个命令的退出状态。所谓退出状态，就是上一个命令执行后的返回结果。</p><p>示例：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$?</span> <span class="token operator">!=</span> 0 <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>  <span class="token keyword">echo</span> <span class="token string">"error"</span>  <span class="token keyword">exit</span> 1<span class="token punctuation">;</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>退出状态是一个数字，一般情况下，大部分命令执行成功会返回 0，失败返回 1。</p><p>不过，也有一些命令返回其他值，表示不同类型的错误。</p><h3 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h3><pre class="line-numbers language-bash"><code class="language-bash">转义字符    含义\\    反斜杠\a    警报，响铃\b    退格（删除键）\f    换页<span class="token punctuation">(</span>FF<span class="token punctuation">)</span>，将当前位置移到下页开头\n    换行\r    回车\t    水平制表符（tab键） \v    垂直制表符<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>shell默认是不转义上面的字符的。需要加<code>-e</code>选项。</strong></p><p>举个例子：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>a<span class="token operator">=</span>11<span class="token keyword">echo</span> -e <span class="token string">"a is <span class="token variable">$a</span> \n"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-bash"><code class="language-bash">a is 11<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里 <code>-e</code> 表示对转义字符进行替换。如果不使用 <code>-e</code> 选项，将会原样输出：</p><pre class="line-numbers language-bash"><code class="language-bash">a is 11\n<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以使用 echo 命令的 <code>-E</code> 选项禁止转义，默认也是不转义的；使用 <code>-n</code> 选项可以禁止插入换行符。</p><h3 id="命令替换"><a href="#命令替换" class="headerlink" title="命令替换"></a>命令替换</h3><p>命令替换是指Shell可以先执行命令，将输出结果暂时保存，在适当的地方输出。</p><p>语法：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token variable"><span class="token variable">`</span><span class="token function">command</span><span class="token variable">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>注意是反引号，不是单引号，这个键位于 Esc 键下方。</strong></p><p>下面的例子中，将命令执行结果保存在变量中：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>DATE<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">date</span><span class="token variable">`</span></span><span class="token keyword">echo</span> <span class="token string">"Date is <span class="token variable">$DATE</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="变量替换"><a href="#变量替换" class="headerlink" title="变量替换"></a>变量替换</h3><p>变量替换可以根据变量的状态（是否为空、是否定义等）来改变它的值。</p><p>可以使用的变量替换形式：</p><table><thead><tr><th>形式</th><th>说明</th></tr></thead><tbody><tr><td>$<code>{var}</code></td><td>变量本来的值</td></tr><tr><td>$<code>{var:-word}</code></td><td>如果变量 <code>var</code> 为空或已被删除(unset)，那么返回 word，但不改变 <code>var</code> 的值。</td></tr><tr><td>$<code>{var:=word}</code></td><td>如果变量 <code>var</code> 为空或已被删除(unset)，那么返回 word，并将 <code>var</code> 的值设置为 word。</td></tr><tr><td>$<code>{var:?message}</code></td><td>如果变量 <code>var</code> 为空或已被删除(unset)，那么将消息 message 送到标准错误输出，可以用来检测变量 <code>var</code> 是否可以被正常赋值。若此替换出现在Shell脚本中，那么脚本将停止运行。</td></tr><tr><td>$<code>{var:+word}</code></td><td>如果变量 <code>var</code> 被定义，那么返回 word，但不改变 var 的值。</td></tr></tbody></table><h3 id="一个完整的shell示例"><a href="#一个完整的shell示例" class="headerlink" title="一个完整的shell示例"></a>一个完整的shell示例</h3><p>下面的脚本用于php安装过程中安装zip扩展。</p><p><code>php_zip_ins.sh</code></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment" spellcheck="true">#zip install</span><span class="token keyword">if</span> <span class="token punctuation">[</span> -d php-5.4.25/ext/zip <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>    <span class="token function">cd</span> php-5.4.25/ext/zip<span class="token keyword">else</span>    <span class="token function">tar</span> zxvf php-5.4.25.tar.gz    <span class="token function">cd</span> php-5.4.25/ext/zip<span class="token keyword">fi</span>/usr/local/php/bin/phpize./configure --with-php-config<span class="token operator">=</span>/usr/local/php/bin/php-config<span class="token function">make</span><span class="token punctuation">[</span> <span class="token variable">$?</span> <span class="token operator">!=</span> 0 <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">exit</span><span class="token function">make</span> <span class="token function">install</span><span class="token keyword">echo</span> <span class="token function">grep</span> <span class="token string">'no-debug-zts-20100525'</span> /usr/local/php/etc/php.ini<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$?</span> <span class="token operator">!=</span> 0 <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>        <span class="token keyword">echo</span> <span class="token string">''</span> <span class="token operator">>></span> /usr/local/php/etc/php.ini        <span class="token keyword">echo</span> <span class="token string">'extension_dir=/usr/local/php/lib/php/extensions/no-debug-zts-20100525'</span> <span class="token operator">>></span> /usr/local/php/etc/php.ini<span class="token keyword">fi</span><span class="token function">grep</span> <span class="token string">'zip.so'</span> /usr/local/php/etc/php.ini<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$?</span> <span class="token operator">!=</span> 0 <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>    <span class="token keyword">echo</span> <span class="token string">'extension=zip.so'</span> <span class="token operator">>></span> /usr/local/php/etc/php.ini<span class="token keyword">fi</span><span class="token keyword">echo</span> <span class="token string">"zip install is OK"</span>/usr/local/apache2/bin/apachectl restart<span class="token function">cd</span> -<span class="token function">rm</span> -rf php-5.4.25<span class="token keyword">echo</span> <span class="token string">"all ok!"</span><span class="token function">ls</span> /usr/local/php/lib/php/extensions/no-debug-zts-20100525/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="02-Shell脚本学习–运算符"><a href="#02-Shell脚本学习–运算符" class="headerlink" title="02- Shell脚本学习–运算符"></a>02- Shell脚本学习–运算符</h2><h3 id="Shell运算符"><a href="#Shell运算符" class="headerlink" title="Shell运算符"></a>Shell运算符</h3><p>Bash 支持很多运算符，包括算数运算符、关系运算符、布尔运算符、字符串运算符和文件测试运算符。</p><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><p>原生bash不支持简单的数学运算，但是可以通过其他命令来实现，例如 awk 和 expr，expr 最常用。</p><p><code>expr</code> 是一款表达式计算工具，使用它能完成表达式的求值操作。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 命令行直接计算</span><span class="token function">expr</span> 2 + 2   <span class="token comment" spellcheck="true">#4</span><span class="token function">expr</span> 3 - 2   <span class="token comment" spellcheck="true">#1</span><span class="token function">expr</span> 3 / 2   <span class="token comment" spellcheck="true">#1</span><span class="token function">expr</span> 3 \* 2   <span class="token comment" spellcheck="true">#6</span><span class="token comment" spellcheck="true"># 使用表达式</span>a<span class="token operator">=</span>10b<span class="token operator">=</span>20val<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $a + $b<span class="token variable">`</span></span><span class="token keyword">echo</span> <span class="token string">"a + b : <span class="token variable">$val</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：</p><ul><li><strong>表达式和运算符之间要有空格</strong>，例如 <code>2+2</code> 是不对的，必须写成 <code>2 + 2</code>，这与我们熟悉的大多数编程语言不一样。</li><li>乘号(*)前边必须加反斜杠(\)才能实现乘法运算</li><li>完整的表达式要被 ` ` 包含，注意这个字符不是常用的单引号，在 Esc 键下边。</li></ul><p><strong>算术运算符列表</strong></p><pre class="line-numbers language-bash"><code class="language-bash">运算符    说明        举例+        加法    <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $a + $b<span class="token variable">`</span></span> 结果为 30。-       减法    <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $a - $b<span class="token variable">`</span></span> 结果为 10。*        乘法    <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $a \* $b<span class="token variable">`</span></span> 结果为  200。/        除法    <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $b / $a<span class="token variable">`</span></span> 结果为 2。%        取余    <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $b % $a<span class="token variable">`</span></span> 结果为 0。<span class="token operator">=</span>        赋值    a<span class="token operator">=</span><span class="token variable">$b</span> 将把变量 b 的值赋给 a。<span class="token operator">==</span>        相等。用于比较两个数字，相同则返回 true。    <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token operator">==</span> <span class="token variable">$b</span> <span class="token punctuation">]</span> 返回 false。<span class="token operator">!=</span>        不相等。用于比较两个数字，不相同则返回 true。    <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token operator">!=</span> <span class="token variable">$b</span> <span class="token punctuation">]</span> 返回 true。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><p>关系运算符只支持数字，不支持字符串，除非字符串的值是数字。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span>a<span class="token operator">=</span>10b<span class="token operator">=</span>20<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> -eq <span class="token variable">$b</span> <span class="token punctuation">]</span><span class="token keyword">then</span>   <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$a</span> -eq <span class="token variable">$b</span> : a is equal to b"</span><span class="token keyword">else</span>   <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$a</span> -eq <span class="token variable">$b</span>: a is not equal to b"</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>缩成一行可以这样：</p><pre class="line-numbers language-bash"><code class="language-bash">a<span class="token operator">=</span>10<span class="token punctuation">;</span>b<span class="token operator">=</span>20<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> -eq <span class="token variable">$b</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span> <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$a</span> -eq <span class="token variable">$b</span> : a is equal to b"</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$a</span> -eq <span class="token variable">$b</span>: a is not equal to b"</span><span class="token punctuation">;</span> <span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里缩写，主要是为了让大家注意：</p><ul><li>if后面直到then前面的分号结束，都是有空格的: <code>if [ $a -eq $b ]</code></li></ul><p><strong>关系运算符列表</strong></p><pre class="line-numbers language-bash"><code class="language-bash">运算符    说明-eq    检测两个数是否相等，相等返回 true。同算数运算符<span class="token variable"><span class="token variable">`</span><span class="token operator">==</span><span class="token variable">`</span></span>-ne    检测两个数是否相等，不相等返回 <span class="token boolean">true</span>-gt    检测左边的数是否大于右边的，如果是，则返回 true。-lt    检测左边的数是否小于右边的，如果是，则返回 true。-ge    检测左边的数是否大等于右边的，如果是，则返回 true。-le    检测左边的数是否小于等于右边的，如果是，则返回 true。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="布尔运算符"><a href="#布尔运算符" class="headerlink" title="布尔运算符"></a>布尔运算符</h3><p><strong>布尔运算符列表</strong></p><pre class="line-numbers language-bash"><code class="language-bash">运算符    说明<span class="token operator">!</span>    非运算，表达式为 <span class="token boolean">true</span> 则返回 false，否则返回 true。-o    或运算<span class="token punctuation">(</span>or<span class="token punctuation">)</span>，有一个表达式为 <span class="token boolean">true</span> 则返回 true。-a    与运算<span class="token punctuation">(</span>and<span class="token punctuation">)</span>，两个表达式都为 <span class="token boolean">true</span> 才返回 true。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">if</span> <span class="token punctuation">[</span> 3 -eq 3 -a 3 -lt 5 <span class="token punctuation">]</span><span class="token keyword">then</span>    <span class="token keyword">echo</span> <span class="token string">'ok'</span><span class="token keyword">fi</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字符串运算符"><a href="#字符串运算符" class="headerlink" title="字符串运算符"></a>字符串运算符</h3><p><strong>字符串运算符列表</strong></p><pre class="line-numbers language-bash"><code class="language-bash">运算符    说明    举例<span class="token operator">=</span>    检测两个字符串是否相等，相等返回 true。    <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$b</span> <span class="token punctuation">]</span> 返回 false。<span class="token operator">!=</span>    检测两个字符串是否相等，不相等返回 true。    <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token operator">!=</span> <span class="token variable">$b</span> <span class="token punctuation">]</span> 返回 true。-z    检测字符串长度是否为0，为0返回 true。    <span class="token punctuation">[</span> -z <span class="token variable">$a</span> <span class="token punctuation">]</span> 返回 false。-n    检测字符串长度是否为0，不为0返回 true。    <span class="token punctuation">[</span> -n <span class="token variable">$a</span> <span class="token punctuation">]</span> 返回 true。str    检测字符串是否为空，不为空返回 true。    <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token punctuation">]</span> 返回 true。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文件测试运算符"><a href="#文件测试运算符" class="headerlink" title="文件测试运算符"></a>文件测试运算符</h3><p>文件测试运算符用于检测 Unix 文件的各种属性。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span>file<span class="token operator">=</span><span class="token string">"/tmp/test.sh"</span><span class="token keyword">if</span> <span class="token punctuation">[</span> -e <span class="token variable">$file</span> <span class="token punctuation">]</span><span class="token keyword">then</span>   <span class="token keyword">echo</span> <span class="token string">"File exists"</span><span class="token keyword">else</span>   <span class="token keyword">echo</span> <span class="token string">"File does not exist"</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>文件测试运算符列表</p><pre class="line-numbers language-bash"><code class="language-bash">操作符    说明    举例-b <span class="token function">file</span>    检测文件是否是块设备文件，如果是，则返回 true。    <span class="token punctuation">[</span> -b <span class="token variable">$file</span> <span class="token punctuation">]</span> 返回 false。-c <span class="token function">file</span>    检测文件是否是字符设备文件，如果是，则返回 true。    <span class="token punctuation">[</span> -c <span class="token variable">$file</span> <span class="token punctuation">]</span> 返回 false。-d <span class="token function">file</span>    检测文件是否是目录，如果是，则返回 true。    <span class="token punctuation">[</span> -d <span class="token variable">$file</span> <span class="token punctuation">]</span> 返回 false。-f <span class="token function">file</span>    检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。    <span class="token punctuation">[</span> -f <span class="token variable">$file</span> <span class="token punctuation">]</span> 返回 true。-g <span class="token function">file</span>    检测文件是否设置了 SGID 位，如果是，则返回 true。    <span class="token punctuation">[</span> -g <span class="token variable">$file</span> <span class="token punctuation">]</span> 返回 false。-k <span class="token function">file</span>    检测文件是否设置了粘着位<span class="token punctuation">(</span>Sticky Bit<span class="token punctuation">)</span>，如果是，则返回 true。    <span class="token punctuation">[</span> -k <span class="token variable">$file</span> <span class="token punctuation">]</span> 返回 false。-p <span class="token function">file</span>    检测文件是否是具名管道，如果是，则返回 true。    <span class="token punctuation">[</span> -p <span class="token variable">$file</span> <span class="token punctuation">]</span> 返回 false。-u <span class="token function">file</span>    检测文件是否设置了 SUID 位，如果是，则返回 true。    <span class="token punctuation">[</span> -u <span class="token variable">$file</span> <span class="token punctuation">]</span> 返回 false。-r <span class="token function">file</span>    检测文件是否可读，如果是，则返回 true。    <span class="token punctuation">[</span> -r <span class="token variable">$file</span> <span class="token punctuation">]</span> 返回 true。-w <span class="token function">file</span>    检测文件是否可写，如果是，则返回 true。    <span class="token punctuation">[</span> -w <span class="token variable">$file</span> <span class="token punctuation">]</span> 返回 true。-x <span class="token function">file</span>    检测文件是否可执行，如果是，则返回 true。    <span class="token punctuation">[</span> -x <span class="token variable">$file</span> <span class="token punctuation">]</span> 返回 true。-s <span class="token function">file</span>    检测文件是否为空（文件大小是否大于0），不为空返回 true。    <span class="token punctuation">[</span> -s <span class="token variable">$file</span> <span class="token punctuation">]</span> 返回 true。-e <span class="token function">file</span>    检测文件（包括目录）是否存在，如果是，则返回 true。    <span class="token punctuation">[</span> -e <span class="token variable">$file</span> <span class="token punctuation">]</span> 返回 true。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="03-Shell脚本学习–字符串和数组"><a href="#03-Shell脚本学习–字符串和数组" class="headerlink" title="03- Shell脚本学习–字符串和数组"></a>03- Shell脚本学习–字符串和数组</h2><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>字符串是shell编程中最常用最有用的数据类型（除了数字和字符串，也没啥其它类型好用了），字符串可以用单引号，也可以用双引号，也可以不用引号。单双引号的区别跟PHP类似：</p><p>单双引号的区别：</p><ul><li>双引号里可以有变量，单引号则原样输出；</li><li>双引号里可以出现转义字符，单引号则原样输出；</li><li>单引号字串中不能出现单引号。</li></ul><h3 id="拼接字符串"><a href="#拼接字符串" class="headerlink" title="拼接字符串"></a>拼接字符串</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>str1<span class="token operator">=</span><span class="token string">'i'</span>str2<span class="token operator">=</span><span class="token string">'love'</span>str3<span class="token operator">=</span><span class="token string">'you'</span><span class="token keyword">echo</span> <span class="token variable">$str1</span> <span class="token variable">$str2</span> <span class="token variable">$str3</span><span class="token keyword">echo</span> <span class="token variable">$str1</span><span class="token variable">$str2</span><span class="token variable">$str3</span><span class="token keyword">echo</span> <span class="token variable">$str1</span>,<span class="token variable">$str2</span>,<span class="token variable">$str3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-txt"><code class="language-txt">i love youiloveyoui,love,you<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="获取字符串长度"><a href="#获取字符串长度" class="headerlink" title="获取字符串长度"></a>获取字符串长度</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>/str<span class="token operator">=</span><span class="token string">'i love you'</span><span class="token keyword">echo</span> <span class="token variable"><span class="token variable">`</span>$<span class="token punctuation">{</span>#str<span class="token punctuation">}</span><span class="token variable">`</span></span><span class="token comment" spellcheck="true"># 输出：10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="截取字符串"><a href="#截取字符串" class="headerlink" title="截取字符串"></a>截取字符串</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>/str<span class="token operator">=</span><span class="token string">'i love you'</span><span class="token keyword">echo</span> <span class="token variable"><span class="token variable">`</span>$<span class="token punctuation">{</span>str:1<span class="token punctuation">}</span><span class="token variable">`</span></span> <span class="token comment" spellcheck="true"># 从第1个截取到末尾。注意从0开始。</span><span class="token keyword">echo</span> <span class="token variable"><span class="token variable">`</span>$<span class="token punctuation">{</span>str:2:2<span class="token punctuation">}</span><span class="token variable">`</span></span> <span class="token comment" spellcheck="true"># 从第2个截取2个。</span><span class="token keyword">echo</span> <span class="token variable"><span class="token variable">`</span>$<span class="token punctuation">{</span>str:0<span class="token punctuation">}</span><span class="token variable">`</span></span><span class="token comment" spellcheck="true"># 全部截取。</span><span class="token keyword">echo</span> <span class="token variable"><span class="token variable">`</span>$<span class="token punctuation">{</span>str:-3<span class="token punctuation">}</span><span class="token variable">`</span></span> <span class="token comment" spellcheck="true"># 负数无效，视为0。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-txt"><code class="language-txt">love youloi love youi love you<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查找字符串"><a href="#查找字符串" class="headerlink" title="查找字符串"></a>查找字符串</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>/str<span class="token operator">=</span><span class="token string">"i love you"</span><span class="token keyword">echo</span> `expr index <span class="token string">"<span class="token variable">$str</span>"</span> l<span class="token variable"><span class="token variable">`</span><span class="token keyword">echo</span> <span class="token variable">`</span></span><span class="token function">expr</span> index <span class="token string">"<span class="token variable">$str</span>"</span> you` <span class="token comment" spellcheck="true">#最后一个参数是字符，会对后面字符串每一个单独查找，返回最靠前的index</span><span class="token keyword">echo</span> `expr index <span class="token string">"<span class="token variable">$str</span>"</span> o<span class="token variable"><span class="token variable">`</span><span class="token keyword">echo</span> <span class="token variable">`</span></span><span class="token function">expr</span> length <span class="token string">"<span class="token variable">$str</span>"</span>` <span class="token comment" spellcheck="true">#字符串长度</span><span class="token keyword">echo</span> `expr substr <span class="token string">"<span class="token variable">$str</span>"</span> 1 6` <span class="token comment" spellcheck="true">#从字符串中位置1开始截取6个字符。索引是从0开始的。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出:</p><pre class="line-numbers language-txt"><code class="language-txt">34410i love<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意字符串变量需要加双引号。第2个例子里<code>you</code>虽然<code>y</code>的index是8,但是<code>o</code>在前面已经出现过,index是4，最终取所有字符里最靠前的index。</p><p>*拓展：<code>expr</code>更多关于字符串用法：</p><pre class="line-numbers language-bash"><code class="language-bash">STRING <span class="token keyword">:</span> REGEXP   anchored pattern match of REGEXP <span class="token keyword">in</span> STRINGmatch STRING REGEXP        same as STRING <span class="token keyword">:</span> REGEXPsubstr STRING POS LENGTH   <span class="token comment" spellcheck="true">#从STRING中POS位置开始截取LENGTH个字符。POS索引是从1开始的。</span>index STRING CHARS         <span class="token comment" spellcheck="true">#在STRING中查找字符CHARS首次出现的位置，没有找到返回0</span>length STRING              <span class="token comment" spellcheck="true">#字符串长度</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>bash支持一维数组（不支持多维数组），并且没有限定数组的大小。类似与C语言，数组元素的下标由0开始编号。获取数组中的元素要利用下标，下标可以是整数或算术表达式，其值应大于或等于0。</p><p>在Shell中，用括号来表示数组，数组元素用<code>空格</code>符号分割开。定义数组的一般形式为：</p><pre class="line-numbers language-bash"><code class="language-bash">array_name<span class="token operator">=</span><span class="token punctuation">(</span>value1 value2 <span class="token punctuation">..</span>. valuen<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如：</p><pre class="line-numbers language-bash"><code class="language-bash">array_name<span class="token operator">=</span><span class="token punctuation">(</span>value0 value1 value2 value3<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-bash"><code class="language-bash">array_name<span class="token operator">=</span><span class="token punctuation">(</span>    value0    value1    value2    value3<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还可以单独定义数组的各个分量：</p><pre class="line-numbers language-bash"><code class="language-bash">array_name<span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token operator">=</span>value0array_name<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token operator">=</span>value1array_name<span class="token punctuation">[</span>2<span class="token punctuation">]</span><span class="token operator">=</span>value2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以不使用连续的下标，而且下标的范围没有限制。</p><p>下面来读取数组：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">echo</span> $<span class="token variable"><span class="token variable">`</span><span class="token punctuation">{</span>array_name<span class="token punctuation">[</span>2<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token variable">`</span></span> <span class="token comment" spellcheck="true">#读取下标为2的元素</span><span class="token keyword">echo</span> $<span class="token variable"><span class="token variable">`</span><span class="token punctuation">{</span>array_name<span class="token punctuation">[</span>*<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token variable">`</span></span> <span class="token comment" spellcheck="true">#读取所有元素</span><span class="token keyword">echo</span> $<span class="token variable"><span class="token variable">`</span><span class="token punctuation">{</span>array_name<span class="token punctuation">[</span>@<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token variable">`</span></span> <span class="token comment" spellcheck="true">#读取所有元素</span><span class="token keyword">echo</span> $<span class="token variable"><span class="token variable">`</span><span class="token punctuation">{</span>#array_name<span class="token punctuation">[</span>*<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token variable">`</span></span> <span class="token comment" spellcheck="true">#获取数组长度</span><span class="token keyword">echo</span> $<span class="token variable"><span class="token variable">`</span><span class="token punctuation">{</span>#array_name<span class="token punctuation">[</span>@<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token variable">`</span></span> <span class="token comment" spellcheck="true">#获取数组长度</span><span class="token keyword">echo</span> $<span class="token variable"><span class="token variable">`</span><span class="token punctuation">{</span>#array_name<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token variable">`</span></span> <span class="token comment" spellcheck="true">#获取数组中单个元素的长度</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-bash"><code class="language-bash">value2value0 value1 value2 value3value0 value1 value2 value3446<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>对比shell里字符串和数组，我们发现：</p><p>字符串</p><pre class="line-numbers language-bash"><code class="language-bash">str<span class="token operator">=</span><span class="token string">"hello"</span><span class="token variable"><span class="token variable">`</span>$<span class="token punctuation">{</span>#str<span class="token punctuation">}</span><span class="token variable">`</span></span> <span class="token comment" spellcheck="true"># 读取字符串长度</span><span class="token keyword">echo</span> <span class="token variable"><span class="token variable">`</span>$<span class="token punctuation">{</span>str<span class="token punctuation">}</span><span class="token variable">`</span></span> <span class="token comment" spellcheck="true"># 读取字符串全部</span><span class="token keyword">echo</span> <span class="token variable"><span class="token variable">`</span>$<span class="token punctuation">{</span>str:1<span class="token punctuation">}</span><span class="token variable">`</span></span> <span class="token comment" spellcheck="true"># 截取字符串</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>数组：</p><pre class="line-numbers language-bash"><code class="language-bash">arr<span class="token operator">=</span><span class="token punctuation">(</span>a1 a2 a3<span class="token punctuation">)</span><span class="token keyword">echo</span> <span class="token variable"><span class="token variable">`</span>$<span class="token punctuation">{</span>#arr<span class="token punctuation">[</span>*<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token variable">`</span></span> <span class="token comment" spellcheck="true"># 读取数组长度</span><span class="token keyword">echo</span> <span class="token variable"><span class="token variable">`</span>$<span class="token punctuation">{</span>#arr<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token variable">`</span></span> <span class="token comment" spellcheck="true"># 读取数组某个元素长度</span><span class="token keyword">echo</span> <span class="token variable"><span class="token variable">`</span>$<span class="token punctuation">{</span>arr<span class="token punctuation">[</span>*<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token variable">`</span></span> <span class="token comment" spellcheck="true"># 读取数组全部</span><span class="token keyword">echo</span> <span class="token variable"><span class="token variable">`</span>$<span class="token punctuation">{</span>arr<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token variable">`</span></span> <span class="token comment" spellcheck="true"># 读取数组某个元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="04-Shell脚本学习–条件控制"><a href="#04-Shell脚本学习–条件控制" class="headerlink" title="04- Shell脚本学习–条件控制"></a>04- Shell脚本学习–条件控制</h2><h3 id="条件判断：if语句"><a href="#条件判断：if语句" class="headerlink" title="条件判断：if语句"></a>条件判断：if语句</h3><p>语法格式：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">if</span> <span class="token punctuation">[</span> expression <span class="token punctuation">]</span><span class="token keyword">then</span>   Statement<span class="token punctuation">(</span>s<span class="token punctuation">)</span> to be executed <span class="token keyword">if</span> expression is <span class="token boolean">true</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意：<code>expression</code> 和方括号([ ])之间必须有空格，否则会有语法错误。</p><p>if 语句通过关系运算符判断表达式的真假来决定执行哪个分支。Shell 有三种 if … else 语句：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">if</span> <span class="token punctuation">..</span>. <span class="token keyword">fi</span> 语句<span class="token keyword">if</span> <span class="token punctuation">..</span>. <span class="token keyword">else</span> <span class="token punctuation">..</span>. <span class="token keyword">fi</span> 语句<span class="token keyword">if</span> <span class="token punctuation">..</span>. <span class="token keyword">elif</span> <span class="token punctuation">..</span>. <span class="token keyword">else</span> <span class="token punctuation">..</span>. <span class="token keyword">fi</span> 语句<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>示例：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>/a<span class="token operator">=</span>10b<span class="token operator">=</span>20<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token operator">==</span> <span class="token variable">$b</span> <span class="token punctuation">]</span><span class="token keyword">then</span>     <span class="token keyword">echo</span> <span class="token string">"a is equal to b"</span><span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> -gt <span class="token variable">$b</span> <span class="token punctuation">]</span><span class="token keyword">then</span>    <span class="token keyword">echo</span> <span class="token string">"a is greater to b"</span><span class="token keyword">else</span>    <span class="token keyword">echo</span> <span class="token string">"a is less to b"</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>if ... else</code> 语句也可以写成一行，以命令的方式来运行:</p><pre class="line-numbers language-bash"><code class="language-bash">a<span class="token operator">=</span>10<span class="token punctuation">;</span>b<span class="token operator">=</span>20<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token operator">==</span> <span class="token variable">$b</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span> <span class="token keyword">echo</span> <span class="token string">"a is equal to b"</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">echo</span> <span class="token string">"a is not equal to b"</span><span class="token punctuation">;</span><span class="token keyword">fi</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>if ... else</code> 语句也经常与 <code>test</code> 命令结合使用，作用与上面一样：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>/a<span class="token operator">=</span>10b<span class="token operator">=</span>20<span class="token keyword">if</span> <span class="token function">test</span> <span class="token variable">$a</span> <span class="token operator">==</span> <span class="token variable">$b</span> <span class="token keyword">then</span>     <span class="token keyword">echo</span> <span class="token string">"a is equal to b"</span><span class="token keyword">else</span>    <span class="token keyword">echo</span> <span class="token string">"a is not equal to b"</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="分支控制：case语句"><a href="#分支控制：case语句" class="headerlink" title="分支控制：case语句"></a>分支控制：case语句</h3><p><code>case ... esac</code> 与其他语言中的 <code>switch ... case</code> 语句类似，是一种多分枝选择结构。</p><p>示例：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>/grade<span class="token operator">=</span><span class="token string">"B"</span><span class="token keyword">case</span> <span class="token variable">$grade</span> <span class="token keyword">in</span>     <span class="token string">"A"</span><span class="token punctuation">)</span> <span class="token keyword">echo</span> <span class="token string">"Very Good!"</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token string">"B"</span><span class="token punctuation">)</span> <span class="token keyword">echo</span> <span class="token string">"Good!"</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token string">"C"</span><span class="token punctuation">)</span> <span class="token keyword">echo</span> <span class="token string">"Come On!"</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    *<span class="token punctuation">)</span>         <span class="token keyword">echo</span> <span class="token string">"You Must Try!"</span>        <span class="token keyword">echo</span> <span class="token string">"Sorry!"</span><span class="token punctuation">;</span><span class="token punctuation">;</span>esac<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>转换成C语言是：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> grade <span class="token operator">=</span> <span class="token string">'B'</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>grade<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token string">'A'</span><span class="token punctuation">:</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Very Good!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'B'</span><span class="token punctuation">:</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Very Good!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'C'</span><span class="token punctuation">:</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Very Good!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token punctuation">:</span>             <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"You Must Try!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Sorry!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对比看就很容易理解了。很相似，只是格式不一样。</p><p>需要注意的是：<br><strong>取值后面必须为关键字 in，每一模式必须以右括号结束。取值可以为变量或常数。匹配发现取值符合某一模式后，其间所有命令开始执行直至 <code>;;</code>。</strong><code>;;</code> 与其他语言中的 <code>break</code> 类似，意思是跳到整个 <code>case</code> 语句的最后。</p><p>取值将检测匹配的每一个模式。一旦模式匹配，则执行完匹配模式相应命令后不再继续其他模式。如果无一匹配模式，使用星号 <code>*</code> 捕获该值，再执行后面的命令。</p><p>再举一个例子：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>option<span class="token operator">=</span><span class="token string">"<span class="token variable">${1}</span>"</span><span class="token keyword">case</span> <span class="token variable">${option}</span> <span class="token keyword">in</span>   <span class="token string">"-f"</span><span class="token punctuation">)</span> FILE<span class="token operator">=</span><span class="token string">"$<span class="token variable"><span class="token variable">`</span><span class="token punctuation">{</span>2<span class="token punctuation">}</span><span class="token variable">`</span></span>"</span>      <span class="token keyword">echo</span> <span class="token string">"File name is <span class="token variable">$FILE</span>"</span>      <span class="token punctuation">;</span><span class="token punctuation">;</span>   <span class="token string">"-d"</span><span class="token punctuation">)</span> DIR<span class="token operator">=</span><span class="token string">"$<span class="token variable"><span class="token variable">`</span><span class="token punctuation">{</span>2<span class="token punctuation">}</span><span class="token variable">`</span></span>"</span>      <span class="token keyword">echo</span> <span class="token string">"Dir name is <span class="token variable">$DIR</span>"</span>      <span class="token punctuation">;</span><span class="token punctuation">;</span>   *<span class="token punctuation">)</span>       <span class="token keyword">echo</span> <span class="token string">"<span class="token variable"><span class="token variable">`</span><span class="token function">basename</span> $<span class="token variable">`</span></span>{0}``:usage: [-f file] | [-d directory]"</span>      <span class="token keyword">exit</span> 1 <span class="token comment" spellcheck="true"># Command to come out of the program with status 1</span>      <span class="token punctuation">;</span><span class="token punctuation">;</span>esac<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-bash"><code class="language-bash">$./test.shtest.sh: usage: <span class="token punctuation">[</span> -f filename <span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token punctuation">[</span> -d directory <span class="token punctuation">]</span>./test.sh -f index.htmlFile name is index.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里用到了特殊变量<code>${1}</code>,指的是获取命令行的第一个参数。</p><p>下面结合<code>getopts</code>命令介绍下一个经典的例子：从命令行读取参数。</p><p>run.sh  </p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span>usage<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">"Usage: <span class="token variable">$0</span> -s [start|stop|reload|restart] -e [online|test]"</span>    <span class="token keyword">exit</span> 1<span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">[</span> -z <span class="token variable">$1</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    usage<span class="token keyword">fi</span><span class="token keyword">while</span> <span class="token function">getopts</span> <span class="token string">'s:e:h'</span> OPT<span class="token punctuation">;</span> <span class="token keyword">do</span>    <span class="token keyword">case</span> <span class="token variable">$OPT</span> <span class="token keyword">in</span>        s<span class="token punctuation">)</span> cmd<span class="token operator">=</span><span class="token string">"<span class="token variable">$OPTARG</span>"</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        e<span class="token punctuation">)</span> env<span class="token operator">=</span><span class="token string">"<span class="token variable">$OPTARG</span>"</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        h<span class="token punctuation">)</span> usage<span class="token punctuation">;</span><span class="token punctuation">;</span>        ?<span class="token punctuation">)</span> usage<span class="token punctuation">;</span><span class="token punctuation">;</span>    esac<span class="token keyword">done</span><span class="token keyword">echo</span> <span class="token variable">$cmd</span><span class="token keyword">echo</span> <span class="token variable">$env</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当我们直接运行<code>run.sh</code>的时候，会调用<code>usage</code>显示帮助；如果输入正确的参数，则会进入正确的流程。运行示例：</p><pre class="line-numbers language-bash"><code class="language-bash">sh run.sh -s start -e <span class="token function">test</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><p>shell的for循环与c、php等语言不同，同Python很类似。下面是语法格式：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">for</span> 变量 <span class="token keyword">in</span> 列表<span class="token keyword">do</span>    command1    command2    <span class="token punctuation">..</span>.    commandN<span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>/<span class="token keyword">for</span> value <span class="token keyword">in</span> 1 2 3 4 5<span class="token keyword">do</span>     <span class="token keyword">echo</span> <span class="token string">"The value is <span class="token variable">$value</span>"</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-bash"><code class="language-bash">The value is 1The value is 2The value is 3The value is 4The value is 5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>顺序输出字符串中的字符：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">for</span> str <span class="token keyword">in</span> <span class="token string">'This is a string'</span><span class="token keyword">do</span>    <span class="token keyword">echo</span> <span class="token variable">$str</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-txt"><code class="language-txt">This is a string<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>遍历目录下的文件：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">for</span> FILE <span class="token keyword">in</span> *<span class="token keyword">do</span>   <span class="token keyword">echo</span> <span class="token variable">$FILE</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码将遍历当前目录下所有的文件。在Linux下，可以改为其他目录试试。</p><p>遍历文件内容：<br>city.txt</p><pre class="line-numbers language-txt"><code class="language-txt">beijingtianjinshanghai<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>citys<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">cat</span> city.txt<span class="token variable">`</span></span><span class="token keyword">for</span> city <span class="token keyword">in</span> <span class="token variable">$citys</span><span class="token keyword">do</span>   <span class="token keyword">echo</span> <span class="token variable">$city</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-txt"><code class="language-txt">beijingtianjinshanghai<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><p>只要while后面的条件满足，就一直执行do里面的代码块。</p><p>其格式为：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">while</span> <span class="token function">command</span><span class="token keyword">do</span>   Statement<span class="token punctuation">(</span>s<span class="token punctuation">)</span> to be executed <span class="token keyword">if</span> <span class="token function">command</span> is <span class="token boolean">true</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>命令执行完毕，控制返回循环顶部，从头开始直至测试条件为假。</p><p>示例：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>c<span class="token operator">=</span>0<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">[</span> <span class="token variable">$c</span> -lt 3 <span class="token punctuation">]</span><span class="token keyword">do</span>    <span class="token keyword">echo</span> <span class="token string">"Value c is <span class="token variable">$c</span>"</span>    c<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $c + 1<span class="token variable">`</span></span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-txt"><code class="language-txt">Value c is 0Value c is 1Value c is 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这里由于shell本身不支持算数运算，所以使用<code>expr</code>命令进行自增。</p><h3 id="until循环"><a href="#until循环" class="headerlink" title="until循环"></a>until循环</h3><p>until 循环执行一系列命令直至条件为 true 时停止。until 循环与 while 循环在处理方式上刚好相反。一般while循环优于until循环，但在某些时候，也只是极少数情况下，until 循环更加有用。</p><p>将上面while循环的例子改改，就能达到一样的效果：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>c<span class="token operator">=</span>0<span class="token punctuation">;</span><span class="token keyword">until</span> <span class="token punctuation">[</span> <span class="token variable">$c</span> -eq 3 <span class="token punctuation">]</span><span class="token keyword">do</span>    <span class="token keyword">echo</span> <span class="token string">"Value c is <span class="token variable">$c</span>"</span>    c<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $c + 1<span class="token variable">`</span></span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先do里面的语句块一直在运行，直到满足了until的条件就停止。</p><p>输出：</p><pre class="line-numbers language-txt"><code class="language-txt">Value c is 0Value c is 1Value c is 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="跳出循环"><a href="#跳出循环" class="headerlink" title="跳出循环"></a>跳出循环</h3><p>在循环过程中，有时候需要在未达到循环结束条件时强制跳出循环，像大多数编程语言一样，Shell也使用 break 和 continue 来跳出循环。</p><h3 id="break"><a href="#break" class="headerlink" title="break"></a>break</h3><p>break命令允许跳出所有循环（终止执行后面的所有循环）。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>i<span class="token operator">=</span>0<span class="token keyword">while</span> <span class="token punctuation">[</span> <span class="token variable">$i</span> -lt 5 <span class="token punctuation">]</span><span class="token keyword">do</span>    i<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $i + 1<span class="token variable">`</span></span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$i</span> <span class="token operator">==</span> 3 <span class="token punctuation">]</span>        <span class="token keyword">then</span>            <span class="token keyword">break</span>    <span class="token keyword">fi</span>    <span class="token keyword">echo</span> -e <span class="token variable">$i</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-txt"><code class="language-txt">12<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在嵌套循环中，break 命令后面还可以跟一个整数，表示跳出第几层循环。例如：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">break</span> n<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>表示跳出第 n 层循环。</p><h3 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h3><p>continue命令与break命令类似，只有一点差别，它不会跳出所有循环，仅仅跳出当前循环。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>i<span class="token operator">=</span>0<span class="token keyword">while</span> <span class="token punctuation">[</span> <span class="token variable">$i</span> -lt 5 <span class="token punctuation">]</span><span class="token keyword">do</span>    i<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $i + 1<span class="token variable">`</span></span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$i</span> <span class="token operator">==</span> 3 <span class="token punctuation">]</span>        <span class="token keyword">then</span>            <span class="token keyword">continue</span>    <span class="token keyword">fi</span>    <span class="token keyword">echo</span> -e <span class="token variable">$i</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-txt"><code class="language-txt">1245<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="05-Shell脚本学习–函数"><a href="#05-Shell脚本学习–函数" class="headerlink" title="05- Shell脚本学习–函数"></a>05- Shell脚本学习–函数</h2><p>函数可以让我们将一个复杂功能划分成若干模块，让程序结构更加清晰，代码重复利用率更高。像其他编程语言一样，Shell 也支持函数。Shell 函数必须先定义后使用。</p><h3 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h3><p>Shell 函数的定义格式如下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">function</span> function_name <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    list of commands    <span class="token punctuation">[</span> <span class="token keyword">return</span> value <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>其中<code>function</code>关键字是可选的。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>hello<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'hello'</span><span class="token punctuation">;</span><span class="token punctuation">}</span>hello<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-txt"><code class="language-txt">hello<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>调用函数只需要给出函数名，不需要加括号。</p><p>函数返回值，可以显式增加return语句；如果不加，会将最后一条命令运行结果作为返回值。</p><p>Shell 函数返回值只能是整数，一般用来表示函数执行成功与否，0表示成功，其他值表示失败。如果 return 其他数据，比如一个字符串，往往会得到错误提示：<code>numeric argument required</code>。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">function</span> hello<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">'hello'</span><span class="token punctuation">;</span><span class="token punctuation">}</span>hello<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-bash"><code class="language-bash">line 4: return: hello: numeric argument required<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果一定要让函数返回字符串，那么可以先定义一个变量，用来接收函数的计算结果，脚本在需要的时候访问这个变量来获得函数返回值。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">function</span> hello<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">'hello'</span><span class="token punctuation">;</span><span class="token punctuation">}</span>str<span class="token operator">=</span>hello<span class="token keyword">echo</span> <span class="token variable">$str</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-txt"><code class="language-txt">hello<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>像删除变量一样，删除函数也可以使用 <code>unset</code> 命令，不过要加上 <code>.f</code> 选项，如下所示：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token variable">$unset</span> .f function_name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果你希望直接从终端调用函数，可以将函数定义在主目录下的 .profile 文件，这样每次登录后，在命令提示符后面输入函数名字就可以立即调用。</p><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>在Shell中，调用函数时可以向其传递参数。在函数体内部，通过 <code>$n</code> 的形式来获取参数的值，例如，<code>$1</code>表示第一个参数，<code>$2</code>表示第二个参数…这就是前面讲的特殊变量。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">function</span> sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">case</span> $<span class="token comment" spellcheck="true"># in </span>        0<span class="token punctuation">)</span> <span class="token keyword">echo</span> <span class="token string">"no param"</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        1<span class="token punctuation">)</span> <span class="token keyword">echo</span> <span class="token variable">$1</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        2<span class="token punctuation">)</span> <span class="token keyword">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $1 + $2<span class="token variable">`</span></span><span class="token punctuation">;</span><span class="token punctuation">;</span>        3<span class="token punctuation">)</span> <span class="token keyword">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $1 + $2 + $3<span class="token variable">`</span></span><span class="token punctuation">;</span><span class="token punctuation">;</span>        *<span class="token punctuation">)</span> <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$#</span> params! It's too much!"</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    esac<span class="token punctuation">}</span><span class="token function">sum</span> 1 3 5 6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-txt"><code class="language-txt">4 params! It's too much!<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意，<code>$10</code> 不能获取第十个参数，获取第十个参数需要<code>${10}</code>。当<code>n&gt;=10</code>时，需要使用<code>${n}</code>来获取参数。</p><p>另外，还有几个特殊变量用来处理参数，前面已经提到：</p><pre class="line-numbers language-bash"><code class="language-bash">特殊变量    说明$<span class="token comment" spellcheck="true">#    传递给函数的参数个数。</span><span class="token variable">$*</span>    显示所有传递给函数的参数。<span class="token variable">$@</span>    与<span class="token variable">$*</span>相同，但是略有区别，请查看Shell特殊变量。<span class="token variable">$?</span>    函数的返回值。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="如何获取函数返回值"><a href="#如何获取函数返回值" class="headerlink" title="如何获取函数返回值"></a>如何获取函数返回值</h3><p>后面的变量需要使用函数的返回值，怎么实现？  </p><p>示例：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">function</span> sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> 1+2+3<span class="token variable">`</span></span><span class="token punctuation">}</span>num<span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">sum</span><span class="token variable">)</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就可以取到返回值了。</p><h2 id="06-Shell脚本学习–其它"><a href="#06-Shell脚本学习–其它" class="headerlink" title="06- Shell脚本学习–其它"></a>06- Shell脚本学习–其它</h2><h3 id="Shell输入输出重定向"><a href="#Shell输入输出重定向" class="headerlink" title="Shell输入输出重定向"></a>Shell输入输出重定向</h3><p>Unix 命令默认从标准输入设备(stdin)获取输入，将结果输出到标准输出设备(stdout)显示。一般情况下，标准输入设备就是键盘，标准输出设备就是终端，即显示器。<br>输出重定向</p><p>命令的输出不仅可以是显示器，还可以很容易的转移向到文件，这被称为输出重定向。</p><p>命令输出重定向的语法为：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">command</span> <span class="token operator">></span> <span class="token function">file</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样，输出到显示器的内容就可以被重定向到文件。</p><p>例如，下面的命令在显示器上不会看到任何输出：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">who</span> <span class="token operator">></span> <span class="token function">users</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>打开 users 文件，可以看到下面的内容：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cat</span> <span class="token function">users</span>oko         tty01   Sep 12 07:30ai          tty15   Sep 12 13:32ruth        tty21   Sep 12 10:10pat         tty24   Sep 12 13:07steve       tty25   Sep 12 13:03<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出重定向会覆盖文件内容，请看下面的例子：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">echo</span> line 1 <span class="token operator">></span> <span class="token function">users</span><span class="token function">cat</span> <span class="token function">users</span>line 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果不希望文件内容被覆盖，可以使用 <code>&gt;&gt;</code> 追加到文件末尾，例如：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">echo</span> line 2 <span class="token operator">>></span> <span class="token function">users</span><span class="token function">cat</span> <span class="token function">users</span>line 1line 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输入重定向</p><p>和输出重定向一样，Unix 命令也可以从文件获取输入，语法为：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">command</span> <span class="token operator">&lt;</span> <span class="token function">file</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样，本来需要从键盘获取输入的命令会转移到文件读取内容。</p><p>注意：输出重定向是大于号(&gt;)，输入重定向是小于号(&lt;)。</p><p>例如，计算 users 文件中的行数，可以使用下面的命令：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">wc</span> -l <span class="token function">users</span>2 <span class="token function">users</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>也可以将输入重定向到 users 文件：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">wc</span> -l <span class="token operator">&lt;</span> <span class="token function">users</span>2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注意：上面两个例子的结果不同：第一个例子，会输出文件名；第二个不会，因为它仅仅知道从标准输入读取内容。</p><h3 id="重定向深入讲解"><a href="#重定向深入讲解" class="headerlink" title="重定向深入讲解"></a>重定向深入讲解</h3><p>一般情况下，每个 Unix/Linux 命令运行时都会打开三个文件：</p><ul><li>**标准输入文件(stdin)**：stdin的文件描述符为0，Unix程序默认从stdin读取数据。</li><li>**标准输出文件(stdout)**：stdout 的文件描述符为1，Unix程序默认向stdout输出数据。</li><li>**标准错误文件(stderr)**：stderr的文件描述符为2，Unix程序会向stderr流中写入错误信息。</li></ul><p>默认情况下，<code>command &gt; file</code> 将 stdout 重定向到 file，<code>command &lt; file</code> 将stdin 重定向到 file。</p><p>如果希望 stderr 重定向到 file，可以这样写：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">command</span> 2 <span class="token operator">></span> <span class="token function">file</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果希望 stderr 追加到 file 文件末尾，可以这样写：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">command</span> 2 <span class="token operator">>></span> <span class="token function">file</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2 表示标准错误文件(stderr)。</p><p>如果希望将 stdout 和 stderr 合并后重定向到 file，可以这样写：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">command</span> <span class="token operator">></span> <span class="token function">file</span> 2<span class="token operator">></span><span class="token operator">&amp;</span>1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果希望对 stdin 和 stdout 都重定向，可以这样写：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">command</span> <span class="token operator">&lt;</span> file1 <span class="token operator">></span>file2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>command 命令将 stdin 重定向到 file1，将 stdout 重定向到 file2。 </p><p><strong>全部可用的重定向命令列表：</strong></p><pre class="line-numbers language-bash"><code class="language-bash">命令    说明<span class="token function">command</span> <span class="token operator">></span> <span class="token function">file</span>    将输出重定向到 file。<span class="token function">command</span> <span class="token operator">&lt;</span> <span class="token function">file</span>    将输入重定向到 file。<span class="token function">command</span> <span class="token operator">>></span> <span class="token function">file</span>    将输出以追加的方式重定向到 file。n <span class="token operator">></span> <span class="token function">file</span>    将文件描述符为 n 的文件重定向到 file。n <span class="token operator">>></span> <span class="token function">file</span>    将文件描述符为 n 的文件以追加的方式重定向到 file。n <span class="token operator">></span><span class="token operator">&amp;</span> m    将输出文件 m 和 n 合并。n <span class="token operator">&lt;</span><span class="token operator">&amp;</span> m    将输入文件 m 和 n 合并。<span class="token operator">&lt;&lt;</span> tag    将开始标记 tag 和结束标记 tag 之间的内容作为输入。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Here-Document"><a href="#Here-Document" class="headerlink" title="Here Document"></a>Here Document</h3><p>Here Document 目前没有统一的翻译，这里暂译为<code>嵌入文档</code>。Here Document 是 Shell 中的一种特殊的重定向方式，它的基本的形式如下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">command</span> <span class="token operator">&lt;&lt;</span> <span class="token string">delimiter    documentdelimiter</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>它的作用是将两个 delimiter 之间的内容(document) 作为输入传递给 command。</p><p>注意：<br><strong>结尾的delimiter 一定要顶格写</strong>，前面不能有任何字符，后面也不能有任何字符，包括空格和 tab 缩进。</p><p>开始的delimiter前后的空格会被忽略掉。</p><p>下面的例子，通过 <code>wc -l</code> 命令计算 document 的行数：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">wc</span> -l <span class="token operator">&lt;&lt;</span> <span class="token string">EOF    This is a simple lookup program    for good (and bad) restaurants    in Cape Town.EOF</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出： 3</p><p>也可以 将 Here Document 用在脚本中，例如：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token function">cat</span> <span class="token operator">&lt;&lt;</span> <span class="token string">EOFThis is a simple lookup programfor good (and bad) restaurantsin Cape Town.EOF</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-txt"><code class="language-txt">This is a simple lookup programfor good (and bad) restaurantsin Cape Town.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="dev-null-文件"><a href="#dev-null-文件" class="headerlink" title="/dev/null 文件"></a>/dev/null 文件</h3><p>如果希望执行某个命令，但又不希望在屏幕上显示输出结果，那么可以将输出重定向到 <code>/dev/null</code>：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">command</span> <span class="token operator">></span> /dev/null<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>/dev/null</code> 是一个特殊的文件，写入到它的内容都会被丢弃；如果尝试从该文件读取内容，那么什么也读不到。但是 <code>/dev/null</code> 文件非常有用，将命令的输出重定向到它，会起到<code>禁止输出</code>的效果。</p><p>如果希望屏蔽 stdout 和 stderr，可以这样写：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">command</span> <span class="token operator">></span> /dev/null 2<span class="token operator">></span><span class="token operator">&amp;</span>1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样不会在屏幕打印任何信息。</p><h3 id="Shell文件包含"><a href="#Shell文件包含" class="headerlink" title="Shell文件包含"></a>Shell文件包含</h3><p>像其他语言一样，Shell 也可以包含外部脚本，将外部脚本的内容合并到当前脚本。</p><p>Shell 中包含脚本可以使用 <code>. filename</code> 或 <code>source filename</code> 。</p><p>两种方式的效果相同，简单起见，一般使用点号(.)，但是注意点号(.)和文件名中间有一空格。</p><p>示例：<br>被包含文件：sub.sh</p><pre class="line-numbers language-txt"><code class="language-txt">name="yjc"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>主文件：test.sh</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">.</span> ./sub.sh<span class="token keyword">echo</span> <span class="token variable">$name</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-txt"><code class="language-txt">yjc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="获取当前正在执行脚本的绝对路径"><a href="#获取当前正在执行脚本的绝对路径" class="headerlink" title="获取当前正在执行脚本的绝对路径"></a>获取当前正在执行脚本的绝对路径</h3><p>正确的命令是：</p><pre class="line-numbers language-bash"><code class="language-bash">basepath<span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">cd</span> `dirname $0`<span class="token punctuation">;</span> <span class="token function">pwd</span><span class="token variable">)</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>直接使用<code>pwd</code>或者<code>dirname $0</code>是不对的。</p><h3 id="按特定字符串截取字符串"><a href="#按特定字符串截取字符串" class="headerlink" title="按特定字符串截取字符串"></a>按特定字符串截取字符串</h3><p>示例：截取<code>/www/html/php/myapp/</code>里的myapp。</p><p>方案：</p><pre class="line-numbers language-bash"><code class="language-bash">str<span class="token operator">=</span>/www/html/php/myapp/b<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">$(</span>echo <span class="token variable">$str</span><span class="token operator">|</span><span class="token function">sed</span> <span class="token string">'s#/# #g'</span><span class="token punctuation">))</span>b_len<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $<span class="token punctuation">{</span>#b<span class="token punctuation">[</span>*<span class="token punctuation">]</span><span class="token punctuation">}</span> - 1<span class="token variable">`</span></span>app_name<span class="token operator">=</span>$<span class="token variable"><span class="token variable">`</span><span class="token punctuation">{</span>b<span class="token punctuation">[</span>$b_len<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token variable">`</span></span><span class="token keyword">echo</span> <span class="token variable">$app_name</span><span class="token comment" spellcheck="true"># 计算数组长度：`${#arr[*]}`  </span><span class="token comment" spellcheck="true"># 计算则需要使用`expr`命令</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里利用<code>sed</code>将字符串按指定字符截成数组，然后取最后一个。  </p><h3 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h3><h3 id="awk简介"><a href="#awk简介" class="headerlink" title="awk简介"></a>awk简介</h3><p>awk是一个强大的文本分析工具，相对于grep的查找，sed的编辑，awk在其对数据分析并生成报告时，显得尤为强大。简单来说awk就是把文件(或其他方式的输入流, 如重定向输入)逐行的读入（看作一个记录集）, 把每一行看作一条记录，以空格(或\t,或用户自己指定的分隔符)为默认分隔符将每行切片（类似字段），切开的部分再进行各种分析处理。</p><p>awk有3个不同版本: awk、nawk和gawk，未作特别说明，一般指gawk，gawk 是 AWK 的 GNU 版本。</p><p>Awk基本语法:　</p><pre class="line-numbers language-shell"><code class="language-shell">awk 'pattern1 `{command1;command 2…; command 3}  pattern2 { command …}`'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>pattern表示用来过滤记录的模式,可是是正则表达式，关系运算表达式，也可以什么也没有(表示选中所有记录)。</p><p>每个pattern选中的行记录会被花括号括起来的命令command操作一遍, command之间用<code>;</code>分割。 花括号里面可以什么也没有, 则默认为print输出整行记录。 Comamnd可以是输出， 可以是算术运算，逻辑运算，循环控制等等。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>s.txt</p><pre class="line-numbers language-txt"><code class="language-txt">zhangsan 1977 male computer 83lisi 1989 male math 99wanglijiang 1990 female chinese 78xuliang 1977 male economic 89xuxin 1986 female english 99wangxuebing 1978 male math 89lichang 1989 male math 99wanglijiang 1990 female chinese 78zhangsansan 1977 male computer 83 langxuebing 1978 male math 89lisibao 1989 male math 99xiaobao 1990 female chinese 78<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一行中的5个字段分别表示<code>姓名, 出生年, 性别,科目,分数</code>, 是一个很传统很典型的报表文件。</p><p>现在演示awk是如何查找的：</p><p>1)直接输出1990年出生的同学:</p><pre class="line-numbers language-shell"><code class="language-shell">$ awk '/1990/' s.txtwanglijiang 1990 female chinese 78wanglijiang 1990 female chinese 78xiaobao 1990 female chinese 78<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者：</p><pre class="line-numbers language-txt"><code class="language-txt">$ awk '/1990/{print $0}' s.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>awk默认把输入的内容以空格拆分出每列。<code>$0</code>表示匹配所有列，<code>print $0</code>将输出所有列，每列分隔符是空格。</p><p>2）对chinese的课程的行输出”语文”：</p><pre class="line-numbers language-shell"><code class="language-shell">$ awk '/chinese/`{print "语文"}`' s.txt语文语文语文<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3）记录的头部和结尾加上一段说明：</p><pre class="line-numbers language-shell"><code class="language-shell">$ awk 'BEGIN`{print "Result of the quiz:\n"}{print $0}END{print "------"}`' s.txtResult of the quiz:zhangsan 1977 male computer 83lisi 1989 male math 99wanglijiang 1990 female chinese 78xuliang 1977 male economic 89xuxin 1986 female english 99wangxuebing 1978 male math 89lichang 1989 male math 99wanglijiang 1990 female chinese 78zhangsansan 1977 male computer 83langxuebing 1978 male math 89lisibao 1989 male math 99xiaobao 1990 female chinese 78------<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>AWK工作流程：<strong>逐行扫描文件，从第一行到最后一行，寻找匹配特定模式的行，并在这些行上进行用户想要到的操作</strong>。</p><p>BEGIN只会在最开始执行；END只会在扫描所有行数之后执行。BEGIN和END之间的花括号的内容每扫描一行都会执行。</p><p>4)查找女生的成绩且只输出姓名、学科、成绩：</p><pre class="line-numbers language-shell"><code class="language-shell">$ awk '$3=="female"`{print $1,$4,$5}`' s.txtwanglijiang chinese 78xuxin english 99wanglijiang chinese 78xiaobao chinese 78<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>$1</code>表示第1列，<code>$n</code>类推。这里条件是表达式，而不是正则。print里<code>,</code>表示空格分隔符。</p><p>5)找出1990年出生的学生姓名，并要求匹配正则:</p><pre class="line-numbers language-shell"><code class="language-shell">$ awk '$2~/1990/`{print $1}`' s.txtwanglijiangwanglijiangxiaobao<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这里<code>~</code>表示匹配正则表达式。<code>!~</code>表示不匹配正则表达式。</p><p>如果需要多选，则改成：</p><pre class="line-numbers language-shell"><code class="language-shell">$ awk '$2~/(1990|1991)/`{print $1}`' s.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参考: <a href="https://github.com/52fhy/shell-book">https://github.com/52fhy/shell-book</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx配置https</title>
      <link href="posts/5de7.html"/>
      <url>posts/5de7.html</url>
      
        <content type="html"><![CDATA[<p>前提准备：域名的<code>ssl</code>证书+<code>nginx</code></p><p><code>ssl</code>证书有很多免费的，腾讯云和阿里云都提供免费的证书。我的证书就是在阿里云领取的。</p><p>首先打开阿里云官网：aliyun.com</p><p>在导航栏的产品分类里搜索证书，点击<code>SSL</code>证书</p><p><img src="https://matery.oss-cn-hangzhou.aliyuncs.com/pic/posts/nginx/Snipaste2020-08-06-11-00-21.png"></p><p>进入云盾证书服务，选购证书免费版。</p><p><img src="https://matery.oss-cn-hangzhou.aliyuncs.com/pic/posts/nginx/Snipaste2020-08-06-11-02-34.png"></p><p>选购完成之后，域名<code>dns</code>解析校验或者<code>txt</code>文件校验都可以，几乎都是秒通过。</p><p><img src="https://matery.oss-cn-hangzhou.aliyuncs.com/pic/posts/nginx/Snipaste2020-08-06-11-07-48.png"></p><p>证书颁发后，点击右下方下载，选择<code>nginx</code>版，会得到一个压缩包，这个压缩包里有两个文件，一个是<code>.pem</code>文件，一个是<code>.key</code>文件，这个都是我们马上会用到的。</p><blockquote><p>nginx： <em>Nginx</em> (engine x) 是一个高性能的<a href="https://baike.baidu.com/item/HTTP">HTTP</a>和<a href="https://baike.baidu.com/item/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/7793488">反向代理</a>web服务器，同时也提供了IMAP/POP3/SMTP服务。Nginx是由伊戈尔·赛索耶夫为<a href="https://baike.baidu.com/item/%E4%BF%84%E7%BD%97%E6%96%AF/125568">俄罗斯</a>访问量第二的Rambler.ru站点（俄文：Рамблер）开发的，第一个公开版本0.1.0发布于2004年10月4日。</p><p>其将<a href="https://baike.baidu.com/item/%E6%BA%90%E4%BB%A3%E7%A0%81">源代码</a>以类BSD许可证的形式发布，因它的稳定性、丰富的功能集、示例配置文件和低系统资源的消耗而<a href="https://baike.baidu.com/item/%E9%97%BB%E5%90%8D/2303308">闻名</a>。2011年6月1日，nginx 1.0.4发布。</p><p>Nginx是一款<a href="https://baike.baidu.com/item/%E8%BD%BB%E9%87%8F%E7%BA%A7/10002835">轻量级</a>的<a href="https://baike.baidu.com/item/Web/150564">Web</a> 服务器/<a href="https://baike.baidu.com/item/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/7793488">反向代理</a>服务器及<a href="https://baike.baidu.com/item/%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6/111106">电子邮件</a>（IMAP/POP3）代理服务器，在BSD-like 协议下发行。其特点是占有内存少，<a href="https://baike.baidu.com/item/%E5%B9%B6%E5%8F%91/11024806">并发</a>能力强，事实上nginx的并发能力在同类型的网页服务器中表现较好，中国大陆使用nginx网站用户有：百度、<a href="https://baike.baidu.com/item/%E4%BA%AC%E4%B8%9C/210931">京东</a>、<a href="https://baike.baidu.com/item/%E6%96%B0%E6%B5%AA/125692">新浪</a>、<a href="https://baike.baidu.com/item/%E7%BD%91%E6%98%93/185754">网易</a>、<a href="https://baike.baidu.com/item/%E8%85%BE%E8%AE%AF/112204">腾讯</a>、<a href="https://baike.baidu.com/item/%E6%B7%98%E5%AE%9D/145661">淘宝</a>等。</p></blockquote><p><code>ubuntu server</code>安装<code>nginx </code>： <code>apt install nginx -y</code></p><p>来看下<code>nginx</code>的默认配置，在<code>/etc/nginx/nginx.conf</code>文件中。</p><pre class="line-numbers language-conf"><code class="language-conf">user www-data;worker_processes auto;pid /run/nginx.pid;include /etc/nginx/modules-enabled/*.conf;events {    worker_connections 768;    # multi_accept on;}http {    ##    # Basic Settings    ##    sendfile on;    tcp_nopush on;    tcp_nodelay on;    keepalive_timeout 65;    types_hash_max_size 2048;    # server_tokens off;    # server_names_hash_bucket_size 64;    # server_name_in_redirect off;    include /etc/nginx/mime.types;    default_type application/octet-stream;    ##    # SSL Settings    ##    ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Dropping SSLv3, ref: POODLE    ssl_prefer_server_ciphers on;    ##    # Logging Settings    ##    access_log /var/log/nginx/access.log;    error_log /var/log/nginx/error.log;    ##    # Gzip Settings    ##    gzip on;    # gzip_vary on;    # gzip_proxied any;    # gzip_comp_level 6;    # gzip_buffers 16 8k;    # gzip_http_version 1.1;    # gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;    ##    # Virtual Host Configs    ##    include /etc/nginx/conf.d/*.conf;    include /etc/nginx/sites-enabled/*;}#mail {#    # See sample authentication script at:#    # http://wiki.nginx.org/ImapAuthenticateWithApachePhpScript# #    # auth_http localhost/auth.php;#    # pop3_capabilities "TOP" "USER";#    # imap_capabilities "IMAP4rev1" "UIDPLUS";# #    server {#        listen     localhost:110;#        protocol   pop3;#        proxy      on;#    }# #    server {#        listen     localhost:143;#        protocol   imap;#        proxy      on;#    }#}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来我们修改这个配置即可给网站套上<code>https</code></p><ol><li><p>在<code>/etc/nginx</code>目录下创建<code>cert</code>目录，上传刚才的证书文件到<code>/etc/nginx/cert</code>，即<code>.pem</code>文件和<code>.key</code>文件，可以选择<code>winscp</code>或者<code>ftp</code>之类的工具</p></li><li><p>配置<code>nginx.conf</code></p><p>在<code>include /etc/nginx/sites-enabled/*</code>后加上下面代码</p><p>把其中的域名全部换成你自己的即可。</p><pre class="line-numbers language-conf"><code class="language-conf">server {          listen 443;          server_name jaav.com.cn;          ssl on;          root /var/www/html;          index index.html index.htm;          ssl_certificate  cert/jaav.com.cn.pem;          ssl_certificate_key cert/jaav.com.cn.key;          ssl_session_timeout 5m;          ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;          ssl_protocols TLSv1 TLSv1.1 TLSv1.2;          ssl_prefer_server_ciphers on;          location / {              index index.html index.htm;        }   }    server {          listen 80;          server_name jaav.com.cn;          rewrite ^(.*)$ https://jaav.com.cn;      }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二个<code>server</code>的作用是<code>http</code>自动跳转到<code>https</code></p></li><li><p>重启<code>nginx</code></p><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token function">service</span> nginx restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p>此时，<code>ctrl+f5</code>刷新你的网页，可以看到已经上了把小小的锁。</p><p><img src="https://matery.oss-cn-hangzhou.aliyuncs.com/pic/posts/nginx/Snipaste2020-08-06-12-48-03.png"></p>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javaweb应用部署</title>
      <link href="posts/2691.html"/>
      <url>posts/2691.html</url>
      
        <content type="html"><![CDATA[<ul><li>这几天写了个Java的大作业，基于<code>servlet</code>和<code>jsp</code>对学生，教师等一系列的增删改查，中途也踩了很多坑，最后本地运行没问题，但是想让别人也可以看到，正好手里头有空闲的服务器，于是就有了这篇文章，做个记录。</li></ul><ol><li><p>下载<code>tomcat</code></p><p>这里我用的是<code>9.x</code>版本的<code>tomcat</code>，进<code> /usr/local/bin</code>目录：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">wget</span> https://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-9/v9.0.36/bin/apache-tomcat-9.0.36.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将下载好的<code>tomcat</code>压缩包解压：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">tar</span> -xvzf apache-tomcat-9.0.36.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>重命名<code>tomcat</code></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">mv</span> apache-tomcat-9.0.36.tar.gz tomcat<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动 tomcat</p><pre class="line-numbers language-bash"><code class="language-bash">./usr/local/bin/tomcat/bin/startup.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>tomcat</code>配置就搞定了</p></li><li><p>Java环境</p><p>见<a href="https://jaav.com.cn/posts/6977.html">上一篇文章</a></p></li><li><p><code>mysql</code>环境</p><ul><li><p>先安装<code>mysql</code>相关服务</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">apt-get</span> <span class="token function">install</span> mysql-server -y<span class="token function">apt-get</span> <span class="token function">install</span> mysql-client -y<span class="token function">apt-get</span> <span class="token function">install</span> libmysqlclient-dev -y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>mysql  -uroot -p你的密码</code>能进到<code>mysql</code>的命令行窗口即可</p></li><li><p>编辑<code>mysql</code>配置文件，设置远程访问</p><pre class="line-numbers language-bash"><code class="language-bash">vim  /etc/mysql/mysql.conf.d/mysqld.cnf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>大约在第四十五行，将<code>bind-address = 127.0.0.1</code>注释掉，即前面介个<code>#</code></p></li><li><p>刷新权限</p><p>进入到mysql的命令行窗口</p><pre class="line-numbers language-bash"><code class="language-bash">grant all on *.* to root@<span class="token string">'%'</span> identified by <span class="token string">'你的密码'</span> with grant option<span class="token punctuation">;</span>flush privileges<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>重启mysql</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">service</span> mysql restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>javaweb程序打<code>war</code>包</p><p>左上角，<code>File-&gt;Project Structure</code></p><p><img src="https://matery.oss-cn-hangzhou.aliyuncs.com/pic/posts/javaweb/Snipaste2020-08-09-20-05-13.png"></p><p>完成后，点击OK</p><p>紧接着回到项目中，点击导航栏的<code>Build</code>，选择<code>Build Artifacts</code></p><p><img src="https://matery.oss-cn-hangzhou.aliyuncs.com/pic/posts/javaweb/Snipaste2020-08-09-20-08-30.png"></p><p><img src="https://matery.oss-cn-hangzhou.aliyuncs.com/pic/posts/javaweb/Snipaste2020-08-09-20-10-06.png"></p><p><code>build</code>结束后，可以看到<code>out</code>文件夹下有个项目的<code>war</code>包，这正是我们所需要的。</p><p><img src="https://matery.oss-cn-hangzhou.aliyuncs.com/pic/posts/javaweb/Snipaste2020-08-09-20-12-08.png"></p></li><li><p>应用部署</p><p>将上面build来的war包放进tomcat里的<code>webapps</code>文件夹下，tomcat会将项目的war包热加载解析，并不需要重启。</p><p>此时，浏览器访问 ip:8080/project就可以看到效果了。</p><p>ip为你服务器的公网ip，project为你生成的war包的名字，记得在安全组里开放8080端口。</p><p><img src="https://matery.oss-cn-hangzhou.aliyuncs.com/pic/posts/javaweb/Snipaste2020-08-09-20-20-54.png"></p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu部署javaweb开发环境</title>
      <link href="posts/6977.html"/>
      <url>posts/6977.html</url>
      
        <content type="html"><![CDATA[<h2 id="ubuntu安装OracleJdk"><a href="#ubuntu安装OracleJdk" class="headerlink" title="ubuntu安装OracleJdk"></a>ubuntu安装OracleJdk</h2><h3 id="配置jdk"><a href="#配置jdk" class="headerlink" title="配置jdk"></a>配置jdk</h3><p>进入<code>/usr/local/bin</code>目录<code>cd /usr/local/bin</code>，创建一个<code>java</code>目录，<code>mkdir java</code>，进入<code>java</code>目录，<code>cd java</code>，下载<code>jdk</code></p><p>这里使用华为云的镜像站，速度较快</p><p><img src="https://matery.oss-cn-hangzhou.aliyuncs.com/pic/posts/oraclejdk/Snipaste2020-07-31-10-49-11.png"></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">wget</span> https://repo.huaweicloud.com/java/jdk/8u202-b08/jdk-8u202-linux-x64.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解压压缩包</p><p><img src="https://matery.oss-cn-hangzhou.aliyuncs.com/pic/posts/oraclejdk/Snipaste2020-07-31-10-50-26.png" alt="解压"></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">tar</span> -xvzf jdk-8u202-linux-x64.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除压缩包</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">rm</span>  -rf jdk-8u202-linux-x64.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>设置环境变量</p><p>没有<code>vim</code>的安装一下就可以<code>sudo apt install vim</code>进行安装</p><p>打开<code>profile</code>这个文件后，按字母<code>i</code>是插入，按<code>i</code>后左下角会显示<code>insert</code>，插入完成后，按<code>esc</code>，<code>insert</code>会消失，再输入<code>:wq</code>完成</p><p>注：如果不懂<code>vim</code>的操作的话，直接用管理员权限在终端中输入这几个重定向</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">echo</span> <span class="token string">'export JAVA_HOME=/usr/local/bin/java/jdk1.8.0_202'</span> <span class="token operator">>></span> /etc/profile<span class="token keyword">echo</span> <span class="token string">'export JRE_HOME=<span class="token variable">${JAVA_HOME}</span>/jre'</span>   <span class="token operator">>></span> /etc/profile<span class="token keyword">echo</span> <span class="token string">'export CLASSPATH=.:<span class="token variable">${JAVA_HOME}</span>/lib:<span class="token variable">${JRE_HOME}</span>/lib'</span> <span class="token operator">>></span> /etc/profile<span class="token keyword">echo</span> <span class="token string">'export PATH=<span class="token variable">$PATH</span>:<span class="token variable">${JAVA_HOME}</span>/bin'</span> <span class="token operator">>></span> /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>vim</code>操作：</p><pre class="line-numbers language-bash"><code class="language-bash">vim /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在文件末尾追加以下内容：</p><p><img src="https://matery.oss-cn-hangzhou.aliyuncs.com/pic/posts/oraclejdk/Snipaste2020-07-31-11-12-23.png"></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">export</span> JAVA_HOME<span class="token operator">=</span>/usr/local/bin/java/jdk1.8.0_202               <span class="token function">export</span> JRE_HOME<span class="token operator">=</span><span class="token variable">${JAVA_HOME}</span>/jre                               <span class="token function">export</span> CLASSPATH<span class="token operator">=</span>.:<span class="token variable">${JAVA_HOME}</span>/lib:<span class="token variable">${JRE_HOME}</span>/lib             <span class="token function">export</span> PATH<span class="token operator">=</span><span class="token variable">$PATH</span><span class="token keyword">:</span><span class="token variable">${JAVA_HOME}</span>/bin <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>更新配置信息</p><p><img src="https://matery.oss-cn-hangzhou.aliyuncs.com/pic/posts/oraclejdk/Snipaste2020-07-31-11-13-20.png"></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">source</span> /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>测试<code>jdk</code>是否安装成功</p><p><img src="https://matery.oss-cn-hangzhou.aliyuncs.com/pic/posts/oraclejdk/Snipaste2020-07-31-11-14-09.png"></p><pre class="line-numbers language-bash"><code class="language-bash">java -version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">java version <span class="token string">"1.8.0_202"</span>                                                    Java<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> SE Runtime Environment <span class="token punctuation">(</span>build 1.8.0_202-b08<span class="token punctuation">)</span>                       Java HotSpot<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> 64-Bit Server VM <span class="token punctuation">(</span>build 25.202-b08, mixed mode<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>到此，Ubuntu安装OracleJdk就成功了。</p><h3 id="配置mysql"><a href="#配置mysql" class="headerlink" title="配置mysql"></a>配置mysql</h3><p>下载<code>mysql</code>：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> apt update<span class="token function">sudo</span> apt <span class="token function">install</span> mysql-server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>配置<code>mysql</code>：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> mysql_secure_installation<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-xml"><code class="language-xml">#1VALIDATE PASSWORD PLUGIN can be used to test passwords...Press y|Y for Yes, any other key for No: N (我的选项)#2Please set the password for root here...New password: (输入密码)Re-enter new password: (重复输入)#3By default, a MySQL installation has an anonymous user,allowing anyone to log into MySQL without having to havea user account created for them...Remove anonymous users? (Press y|Y for Yes, any other key for No) : N (我的选项)#4Normally, root should only be allowed to connect from'localhost'. This ensures that someone cannot guess atthe root password from the network...Disallow root login remotely? (Press y|Y for Yes, any other key for No) : N (我的选项)#5By default, MySQL comes with a database named 'test' thatanyone can access...Remove test database and access to it? (Press y|Y for Yes, any other key for No) : Y (我的选项)#6Reloading the privilege tables will ensure that all changesmade so far will take effect immediately.Reload privilege tables now? (Press y|Y for Yes, any other key for No) : Y (我的选项)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看<code>mysql</code>状态：</p><pre class="line-numbers language-bash"><code class="language-bash">systemctl status mysql.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果显示<code>active(running)</code>则正常</p><p>配置远程访问：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> vim /etc/mysql/mysql.conf.d/mysqld.cnf <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑这个文件，将其中的<code>bind-address = 127.0.0.1</code>这句话前面加个#，注释掉</p><p>刷新权限，进入mysql后：</p><pre class="line-numbers language-bash"><code class="language-bash">grant all on *.* to root@<span class="token string">'%'</span> identified by <span class="token string">'你的密码'</span> with grant option<span class="token punctuation">;</span>flush privileges<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>重启mysql</p><pre class="line-numbers language-bash"><code class="language-bash">systemctl restart mysql.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="配置tomcat"><a href="#配置tomcat" class="headerlink" title="配置tomcat"></a>配置tomcat</h3><p>下载<code>tomcat</code></p><p>这里我用的是<code>9.x</code>版本的<code>tomcat</code>，进<code> /usr/local/bin</code>目录：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">wget</span> https://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-9/v9.0.36/bin/apache-tomcat-9.0.36.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将下载好的<code>tomcat</code>压缩包解压：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">tar</span> -xvzf apache-tomcat-9.0.36.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>重命名<code>tomcat</code></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">mv</span> apache-tomcat-9.0.36.tar.gz tomcat<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动 tomcat</p><pre class="line-numbers language-bash"><code class="language-bash">./usr/local/bin/tomcat/bin/startup.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>tomcat</code>配置就搞定了</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识jdbc</title>
      <link href="posts/6604.html"/>
      <url>posts/6604.html</url>
      
        <content type="html"><![CDATA[<p>JDBC（Java DataBase Connectivity,java数据库连接）是一种用于执行SQL语句的Java API，可以为多种关系数据库提供统一访问，它由一组用Java语言编写的类和接口组成。JDBC提供了一种基准，据此可以构建更高级的工具和接口，使数据库开发人员能够编写数据库应用程序。</p><p>简单地说，JDBC 做三件事：与数据库建立连接、发送 操作数据库的指令并处理结果。</p><p><b>连接JDBC的步骤</b></p><ul><li>加载驱动程序</li><li>创建连接</li><li>执行SQL语句</li><li>关闭连接</li></ul><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>安装完成<code>mysql</code>后可以<code>cmd</code>中<code>mysql -u root -p</code>指定root账户登录<code>mysql</code>数据库。</p><p><img src="https://raw.githubusercontent.com/axh2018/picgo_picture/master/20200314155316.png"></p><p><img src="https://raw.githubusercontent.com/axh2018/picgo_picture/master/20200314161421.png"></p><p>到<code>mysql</code>的官网下载<code>mysql</code>的<a href="https://dev.mysql.com/downloads/connector/j/">JDBC</a>驱动程序。下载完成后得到一个压缩包，将压缩包解压，得到一个下面的目录。其中，我们所需的就是<code>mysql-connection-java-8.0.18.jar</code>包。下载完在<code>src</code>目录下创建一个<code>lib</code>包。将这个包放进lib包中。（下载位置随意</p><p><img src="https://raw.githubusercontent.com/axh2018/picgo_picture/master/20200314155703.png"></p><h2 id="jdbc"><a href="#jdbc" class="headerlink" title="jdbc"></a>jdbc</h2><p>如图，我有个数据库<code>dbname</code>，库里有个表<code>stu</code>，表如图：</p><p><img src="https://raw.githubusercontent.com/axh2018/picgo_picture/master/20200314163528.png"></p><p>在idea打开的项目中左上角选择<code>File-&gt;Project Structure-&gt;Project Settings-&gt;Modules</code>, 然后选择其中的<code>Dependencies</code>选项卡，然后点击右上角绿色的”+”号，选择<code>JARs or directories</code>, 选中你刚刚放到lib目录中的<code>mysql-connector-java-8.0.18.jar</code>，然后点击”OK”。首先将前面解压的<code>mysql-connection-java-8.0.18.jar</code>包复制，然后</p><p>如图：点击右边的<code>+</code>，选择<code>JARs or directories</code>，会弹出一个框，选择你上面解压后的<code>mysql-connection-java-8.0.18.jar</code>包，</p><p><img src="https://raw.githubusercontent.com/axh2018/picgo_picture/master/20200315135207.png"></p><p>上一步执行过后，可以在你的项目下面<code>External Libraries</code>里面看到<code>mysql-connection-java-8.0.18.jar</code>,此时所需<code>jar</code>包已经准备好了。</p><p><img src="https://raw.githubusercontent.com/axh2018/picgo_picture/master/20200315140646.png"></p><p>操作数据库。无非就是增删改查（CURD)，下面具体看看怎么操作：</p><p>先写一个工具类，这个工具类有两个方法，（一个用来获取数据库的连接，也就是connection，另一个自然是关闭这个连接）</p><p>不妨叫这个工具类<code>MyDBUtils.java</code></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> JDBC<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>DriverManager<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SQLException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyDBUtils</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//设置连接地址</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String url <span class="token operator">=</span> <span class="token string">"jdbc:mysql://localhost:3306/dbname?serverTimezone=UTC&amp;characterEncoding=utf-8"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//mysql用户名</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String user <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//mysql密码</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String passwd <span class="token operator">=</span> <span class="token string">"123456"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//返回一个connection对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Connection <span class="token function">getCon</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//加载mysql驱动</span>        Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.cj.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//获取连接</span>        Connection connection <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>user<span class="token punctuation">,</span>passwd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//返回连接对象</span>        <span class="token keyword">return</span> connection<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span>Connection connection<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//关闭连接</span>        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的<code>MyDBUtils</code>里面的属性和方法都写成了静态，方便我们下面调用。</p><p>好了，工具类写好了，看下具体怎么增删改查吧。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>DriverManager<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>ResultSet<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Statement<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CURD</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取连接对象</span>        Connection connection <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getCon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//要执行的sql语句</span>        String sql <span class="token operator">=</span> <span class="token string">"update stu set name  = '小红'  where name = '小明' "</span><span class="token punctuation">;</span>        PreparedStatement pt <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//返回值a表示受影响的行数，如果a > 0，表示插入成功</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> st<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        pt<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//这里为了简化，查询user表里所有的内容</span>        String sql <span class="token operator">=</span> <span class="token string">"select * from user;"</span><span class="token punctuation">;</span>        PreparedStatement pt <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        ResultSet rs <span class="token operator">=</span> pt<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果ResultSet中有数据</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"查询成功\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//此表有三个字段</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"查询失败\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pt<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException<span class="token punctuation">,</span> ClassNotFoundException    <span class="token punctuation">{</span>        Connection connection <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getCon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String sql <span class="token operator">=</span> <span class="token string">"delete  from user where id=?"</span><span class="token punctuation">;</span>        PreparedStatement pt <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        pt<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果删除成功，受影响行数为1</span>        <span class="token keyword">int</span> success <span class="token operator">=</span> pt<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>success <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"删除成功\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"删除失败\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pt<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> String username<span class="token punctuation">,</span>String passwd<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException<span class="token punctuation">,</span> ClassNotFoundException    <span class="token punctuation">{</span>        Connection connection <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getCon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String sql <span class="token operator">=</span> <span class="token string">"insert into user values (?,?,?)"</span><span class="token punctuation">;</span>        PreparedStatement pt <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        pt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>        pt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        pt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> pass<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span>  success <span class="token operator">=</span> pt<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>success <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"插入成功\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"插入失败\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pt<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：<code>mysql</code>8.0版本不加<code>serverTimezone=UTC&amp;characterEncoding=utf-8</code>这一段会抛出异常，报错说是因为时区原因。还有<code>com.mysql.jdbc.Driver</code>要写成<code>com.mysql.cj.jdbc.Driver</code>。</p><p>在查询方法中，先关闭<code>ResultSet</code>，再关闭<code>PreparedStatement</code>，最后再关闭<code>Connection</code>，遵循先打开后关闭的原则。</p><p>在上面的<code>SQL</code>语句中，有些语句带了“？”，这个“？”是占位符，可以后面再设定这个问号的具是什么，可以不用写死<code>SQL</code>语句，更灵活。</p><p>在<code>jdbc</code>中，我们用<code>PreparedStatement</code>，而不用<code>Statement</code>，相比之下，<code>PreparedStatement</code>比<code>Statement</code>更优秀，现在没人用<code>Statement</code>，有以下几个原因：</p><ol><li><p><strong>一.代码的可读性和可维护性</strong></p><p>用<code>Statement</code>，sql语句中没有占位符，带来的不便就是字符串的拼接，稍不留神就容易出错，而且代码可读性很低。</p></li><li><p><strong>PreparedStatement尽最大可能提高性能</strong></p><p>PreparedStatement是预编译的,对于批量处理可以大大提高效率，</p></li><li><p><strong>最重要的一点是极大地提高了安全性</strong></p><p>体现就是防<code>SQL</code>注入，<code>Statement</code>是做不到这一点的。</p></li></ol><h2 id="Apache-DBUtils"><a href="#Apache-DBUtils" class="headerlink" title="Apache DBUtils"></a>Apache DBUtils</h2><p><code>commons-dbutils</code> 是 <code>Apache</code> 组织提供的一个开源 <code>JDBC</code>工具类库，它是对<code>JDBC</code>的简单封装，学习成本极低，并且使用<code>dbutils</code>能极大简化jdbc编码的工作量，同时也不会影响程序的性能。因此<code>dbutils</code>成为很多不喜欢<code>hibernate</code>的公司的首选。</p><p>　　<code>commons-dbutilsAPI</code>介绍：</p><ul><li><p>org.apache.commons.dbutils.QueryRunner</p></li><li><p>org.apache.commons.dbutils.ResultSetHandler</p></li><li><p>org.apache.commons.dbutils.DbUtils</p></li></ul><h2 id="Apache-DBCP"><a href="#Apache-DBCP" class="headerlink" title="Apache  DBCP"></a>Apache  DBCP</h2><h2 id="C3P0"><a href="#C3P0" class="headerlink" title="C3P0"></a>C3P0</h2><p>c3p0是一个数据库连接池，为什么需要数据库连接池？数据库连接的创建和关闭需要消耗很多的资源，如此往复，很不划算，所以我们需要一个连接池来管理我们的连接对象。</p><p>待更….</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jdbc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+Github部署博客</title>
      <link href="posts/a654.html"/>
      <url>posts/a654.html</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo搭建个人博客"><a href="#Hexo搭建个人博客" class="headerlink" title="Hexo搭建个人博客"></a>Hexo搭建个人博客</h1><h2 id="简单开始"><a href="#简单开始" class="headerlink" title="简单开始"></a>简单开始</h2><p><b>如果你不想那么麻烦，想偷懒的话，不妨直接</b></p><p><a href="https://github.com/axh2018/hexo_blog">https://github.com/axh2018/hexo_blog</a>  直接用这个。</p><h2 id="前提准备："><a href="#前提准备：" class="headerlink" title="前提准备："></a>前提准备：</h2><h3 id="下载node-js"><a href="#下载node-js" class="headerlink" title="下载node.js"></a>下载node.js</h3><blockquote><p>Node.js 是一个基于 Chrome V8 引擎的 <a href="https://baike.baidu.com/item/JavaScript/321142">JavaScript</a> 运行环境。 Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型。Node 是一个让 JavaScript 运行在<a href="https://baike.baidu.com/item/%E6%9C%8D%E5%8A%A1%E7%AB%AF/6492316">服务端</a>的开发平台，它让 JavaScript 成为与<a href="https://baike.baidu.com/item/PHP/9337">PHP</a>、<a href="https://baike.baidu.com/item/Python/407313">Python</a>、<a href="https://baike.baidu.com/item/Perl/851577">Perl</a>、<a href="https://baike.baidu.com/item/Ruby/11419">Ruby</a> 等服务端语言平起平坐的<a href="https://baike.baidu.com/item/%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80/1379708">脚本语言</a>。发布于2009年5月，由Ryan Dahl开发，实质是对Chrome V8引擎进行了封装。</p><p>Node对一些特殊用例进行优化，提供替代的<a href="https://baike.baidu.com/item/API/10154">API</a>，使得V8在非浏览器环境下运行得更好。V8引擎执行Javascript的速度非常快，性能非常好。Node是一个基于Chrome JavaScript运行时建立的平台， 用于方便地搭建响应速度快、易于扩展的网络应用。Node 使用<a href="https://baike.baidu.com/item/%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8/9597519">事件驱动</a>， 非阻塞<a href="https://baike.baidu.com/item/I%2FO/84718">I/O</a> 模型而得以轻量和高效，非常适合在分布式设备上运行数据密集型的实时应用。</p></blockquote><p><img src="https://raw.githubusercontent.com/axh2018/picgo_picture/master/20200222185614.png"></p><p>如图，cmd下输入node -v有版本号即可。</p><h3 id="下载Git"><a href="#下载Git" class="headerlink" title="下载Git"></a>下载Git</h3><blockquote><p>Git(读音为/gɪt/。)是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。 Git 是 [Linus Torvalds](<a href="https://baike.baidu.com/item/Linus">https://baike.baidu.com/item/Linus</a> Torvalds/9336769) 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。</p><p>Torvalds 开始着手开发 Git 是为了作为一种过渡方案来替代 BitKe</p></blockquote><p><img src="https://raw.githubusercontent.com/axh2018/picgo_picture/master/20200222185835.png"></p><p>如图，鼠标右键能看见Git Bash Here和Git GUI Here即可。</p><h3 id="GitHub账号"><a href="#GitHub账号" class="headerlink" title="GitHub账号"></a>GitHub账号</h3><blockquote><p>GitHub是一个面向<a href="https://baike.baidu.com/item/%E5%BC%80%E6%BA%90/20720669">开源</a>及私有<a href="https://baike.baidu.com/item/%E8%BD%AF%E4%BB%B6/12053">软件</a>项目的托管平台，因为只支持git 作为唯一的版本库格式进行托管，故名GitHub。</p><p>GitHub于2008年4月10日正式上线，除了Git代码仓库托管及基本的 Web管理界面以外，还提供了订阅、讨论组、文本渲染、在线文件编辑器、协作图谱（报表）、代码片段分享（Gist）等功能。目前，其注册用户已经超过350万，托管版本数量也是非常之多，其中不乏知名开源项目 <a href="https://baike.baidu.com/item/Ruby/11419">Ruby</a> on Rails、<a href="https://baike.baidu.com/item/jQuery/5385065">jQuery</a>、<a href="https://baike.baidu.com/item/python/407313">python</a> 等。</p></blockquote><blockquote><p>2018年6月4日，微软宣布，通过75亿美元的股票交易收购代码托管平台GitHub。</p></blockquote><h2 id="开始搭建"><a href="#开始搭建" class="headerlink" title="开始搭建"></a>开始搭建</h2><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>首先创建一个放置博客的文件夹，进入文件夹，右键Git Bash Here，输入下面的指令，添加国内镜像源,加快下载插件速度</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">npm</span> config <span class="token keyword">set</span> registry https://registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注：这条指令输入后并不会有任何输出，别以为是出错了。</p><blockquote><p>Hexo 是一个快速、简洁且高效的博客框架。</p><p>Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><p>快速、简洁且高效的博客框架,Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。</p><p>只需一条指令即可部署到 GitHub Pages, Heroku 或其他网站。</p><p>Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript。</p></blockquote><p>同样，在博客文件夹下，右键Git Bash Here，输入</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">npm</span>  <span class="token function">install</span> -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以输入<code>hexo -v </code>验证是否安装成功，输出版本号即可。</p><p><img src="https://raw.githubusercontent.com/axh2018/picgo_picture/master/20200222191436.png"></p><p>Hexo初始化</p><p>同样，在博客文件夹下，右键Git Bash Here，输入</p><pre class="line-numbers language-bash"><code class="language-bash">$ hexo init <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/axh2018/picgo_picture/master/20200222192829.png"></p><p>Hexo初始化后 ，有以下几个文件/文件夹。</p><ul><li><code>scaffolds：</code>生成文章的一些模板 </li><li><code>source：</code>用来存放你的文章</li><li><code>themes：</code>主题</li><li>.<code>gitignore </code> Git忽略文件夹</li><li><code>_config.yml:</code> 博客的配置文件</li><li><code>package.json</code>  所需模块</li><li><code>node_modules:</code> 依赖包</li><li><code>package-lock.json</code> 记录了模块下载地址</li></ul><p><img src="https://raw.githubusercontent.com/axh2018/picgo_picture/master/20200222192929.png"></p><h3 id="安装依赖插件"><a href="#安装依赖插件" class="headerlink" title="安装依赖插件"></a>安装依赖插件</h3><p>同样，在博客文件夹下，右键Git Bash Here，输入</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">npm</span> intall <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/axh2018/picgo_picture/master/20200222193359.png"></p><h3 id="测试运行"><a href="#测试运行" class="headerlink" title="测试运行"></a>测试运行</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate      <span class="token comment" spellcheck="true">#或者简写hexo g</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时你的博客文件夹根目录下下，会生成一个<code>pubic</code>文件夹，里面存放了生成的页面。</p><p><img src="https://raw.githubusercontent.com/axh2018/picgo_picture/master/20200222205522.png"></p><h3 id="本地预览效果"><a href="#本地预览效果" class="headerlink" title="本地预览效果"></a>本地预览效果</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server        <span class="token comment" spellcheck="true">#或者简写hexo s</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>打开浏览器，输入<code>127.0.0.1:4000</code>  即可预览本地效果</p><p><img src="https://raw.githubusercontent.com/axh2018/picgo_picture/master/20200222205654.png"></p><h3 id="部署到Github"><a href="#部署到Github" class="headerlink" title="部署到Github"></a>部署到Github</h3><h4 id="创建博客仓库"><a href="#创建博客仓库" class="headerlink" title="创建博客仓库"></a>创建博客仓库</h4><p><img src="https://raw.githubusercontent.com/axh2018/picgo_picture/master/20200222210439.png"></p><p>需要 注意的是，仓库名有要求,要创建一个和你用户名相同的仓库，后面加<code>github.io</code>，只有这样，将来要部署到GitHub page的时候，才会被识别，也就是<a href="http://xxxx.github.io,其中xxx就是你注册`github`的用户名.例如我的github/">http://xxxx.github.io，其中xxx就是你注册`GitHub`的用户名。例如我的GitHub</a> id为axh2018，那么我的仓库名必须为axh2018.github.io</p><p><img src="https://raw.githubusercontent.com/axh2018/picgo_picture/master/20200222211048.png"></p><h4 id="生成SSH密钥"><a href="#生成SSH密钥" class="headerlink" title="生成SSH密钥"></a>生成SSH密钥</h4><p>博客文件夹根目录下，右键Git Bash Here，输入</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">git</span>  config --global  user.name    <span class="token string">"githubid"</span>$ <span class="token function">git</span>  config --global  user.email     <span class="token string">"email"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里<code>id</code>和<code>email</code>换成你自己的信息，然后生成<code>ssh</code>密钥</p><pre class="line-numbers language-bash"><code class="language-bash">$ ssh-keygen  -t rsa -C <span class="token string">"email"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/axh2018/picgo_picture/master/20200222215028.png"></p><p>这个时候在你的家目录下会生成一个<code>.ssh</code>文件夹，里面会有两个密钥，而你要做的，是将其中一个上传到<code>Github</code></p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">cat</span>  ~/.ssh/id_rsa.pub<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/axh2018/picgo_picture/master/20200222215154.png"></p><p>将输入的内容复制，打开Github右上角的Settings,找到<code>SSH and GPG keys</code>，然后新建一个<code>key</code>，<code>key</code>的名字随意填一个，内容即刚复制的内容。</p><p><img src="https://raw.githubusercontent.com/axh2018/picgo_picture/master/20200222215350.png"></p><p>输入 <code>ssh -T git@github.com</code>,如果输出你的<code>id</code>，即验证成功。</p><p><img src="https://raw.githubusercontent.com/axh2018/picgo_picture/master/20200222215811.png"></p><h4 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h4><p>此时，大部分工作已经做完了，接下来就是将<code>hexo g</code>生成的静态页面上传到GitHub上。</p><ul><li><p>安装deploy-git 插件</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p><img src="https://raw.githubusercontent.com/axh2018/picgo_picture/master/20200222234213.png"></p><ul><li><p>修改_config.yaml文件最后几行</p><pre class="line-numbers language-yml"><code class="language-yml">   deploy:     type: git     repository: https://github.com/axh2018/axh2018.github.io     branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>部署到GIthub</p><pre class="line-numbers language-bash"><code class="language-bash">   $ hexo clean        <span class="token comment" spellcheck="true">#删除原来生成的pubic文件夹</span>   $ hexo g            <span class="token comment" spellcheck="true">#生成新的页面</span>   $ hexo d            <span class="token comment" spellcheck="true">#部署到GitHub</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><p>​    部署成功后可以通过  <a href="https://userid.github.io访问/">https://userid.github.io访问</a></p><h4 id="layout布局"><a href="#layout布局" class="headerlink" title="layout布局"></a>layout布局</h4><p>你新建一篇文章时：</p><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new XXX<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>它其实默认使用的是<code>post</code>这个布局，也就是在<code>source</code>文件夹下的<code>_post</code>里面。</p><p><code>Hexo</code>有三种默认布局：<code>post</code>、<code>page</code>和<code>draft</code>，它们分别对应不同的路径，而您自定义的其他布局和<code>post</code>相同，都将储存到<code>source/_posts</code>文件夹。</p><p>而new这个命令其实是：</p><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token punctuation">[</span>layout<span class="token punctuation">]</span> <span class="token operator">&lt;</span>title<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>只不过这个<code>layout</code>默认是<code>post</code>罢了。</p><p>如果你想另起一页，那么可以使用</p><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new page newpage<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>系统会自动给你在<code>source</code>文件夹下创建一个<code>newpage</code>文件夹，以及<code>newpage</code>文件夹中的<code>index.md</code>，这样你访问的<code>newpage</code>对应的链接就是<a href="http://xxx.xxx/newpage">http://xxx.xxx/newpage</a></p><p><code>draft</code>是草稿的意思，也就是你如果想写文章，又不希望被看到，那么可以</p><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new draft newdraft<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样会在<code>source/_draft</code>中新建一个<code>newdraft.md</code>文件，如果你的草稿文件写的过程中，想要预览一下，那么可以使用</p><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server --draft<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在本地端口中开启服务预览。</p><p>如果你的草稿文件写完了，想要发表到<code>post</code>中，</p><pre class="line-numbers language-bash"><code class="language-bash">$ hexo publish draft newdraft<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>就会自动把<code>newdraft.md</code>发送到<code>post</code>中。</p><h2 id="定制"><a href="#定制" class="headerlink" title="定制"></a>定制</h2><h3 id="主题更换"><a href="#主题更换" class="headerlink" title="主题更换"></a>主题更换</h3><p>进入博客根目录下，右键Git Bash G+Here，执行下面的指令</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">git</span> clone -b develop https://github.com/blinkfox/hexo-theme-matery themes/matery<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时主题文件夹下会多出一个matery主题。</p><p>然后再更改根目录下的_config.yml配置文件。找到<code>themes:</code>，将他的值改为<code>matery</code>。</p><p>此时你可以<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code></p><p>本地预览<code>matery</code>主题的效果</p><p>关于<code>matery</code>主题：</p><blockquote><p>这是一个采用 <code>Material Design</code> 和响应式设计的 Hexo 博客主题</p><p>QQ 交流群1（已满）: <code>926552981</code> | QQ 交流群2（推荐）: <code>971887688</code></p></blockquote><p>特性：</p><ul><li>简单漂亮，文章内容美观易读</li><li><a href="https://material.io/">Material Design</a> 设计</li><li>响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现</li><li>首页轮播文章及每天动态切换 <code>Banner</code> 图片</li><li>瀑布流式的博客文章列表（文章无特色图片时会有 <code>24</code> 张漂亮的图片代替）</li><li>时间轴式的归档页</li><li><strong>词云</strong>的标签页和<strong>雷达图</strong>的分类页</li><li>丰富的关于我页面（包括关于我、文章统计图、我的项目、我的技能、相册等）</li><li>可自定义的数据的友情链接页面</li><li>支持文章置顶和文章打赏</li><li>支持 <code>MathJax</code></li><li><code>TOC</code> 目录</li><li>可设置复制文章内容时追加版权信息</li><li>可设置阅读文章时做密码验证</li><li><a href="https://gitalk.github.io/">Gitalk</a>、<a href="https://imsun.github.io/gitment/">Gitment</a>、<a href="https://valine.js.org/">Valine</a> 和 <a href="https://disqus.com/">Disqus</a> 评论模块（推荐使用 <code>Gitalk</code>）</li><li>集成了<a href="http://busuanzi.ibruce.info/">不蒜子统计</a>、谷歌分析（<code>Google Analytics</code>）和文章字数统计等功能</li><li>支持在首页的音乐播放和视频播放功能</li><li>支持<code>emoji</code>表情，用<code>markdown emoji</code>语法书写直接生成对应的能<strong>跳跃</strong>的表情。</li><li>支持 <a href="http://www.daovoice.io/">DaoVoice</a>、<a href="https://www.tidio.com/">Tidio</a> 在线聊天功能。</li></ul><h3 id="新建分类categories"><a href="#新建分类categories" class="headerlink" title="新建分类categories"></a>新建分类categories</h3><p><code>categories</code> 页是用来展示所有分类的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>categories/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new page <span class="token string">"categories"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/categories/index.md</code>，至少需要以下内容：</p><pre><code>---title: categoriesdate: 2018-09-30 17:25:30type: "categories"layout: "categories"---</code></pre><h3 id="新建标签-tags-页"><a href="#新建标签-tags-页" class="headerlink" title="新建标签 tags 页"></a>新建标签 tags 页</h3><p><code>tags</code> 页是用来展示所有标签的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>tags/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new page <span class="token string">"tags"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/tags/index.md</code>，至少需要以下内容：</p><pre><code>---title: tagsdate: 2018-09-30 18:23:38type: "tags"layout: "tags"---</code></pre><h3 id="新建about关于我页"><a href="#新建about关于我页" class="headerlink" title="新建about关于我页"></a>新建about关于我页</h3><p><code>about</code> 页是用来展示<strong>关于我和我的博客</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>about/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new page <span class="token string">"about"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/about/index.md</code>，至少需要以下内容：</p><pre><code>---title: aboutdate: 2018-09-30 17:25:30type: "about"layout: "about"---</code></pre><h3 id="新建留言板contact页"><a href="#新建留言板contact页" class="headerlink" title="新建留言板contact页"></a>新建留言板contact页</h3><p><code>contact</code> 页是用来展示<strong>留言板</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>contact/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new page <span class="token string">"contact"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/contact/index.md</code>，至少需要以下内容：</p><pre><code>---title: contactdate: 2018-09-30 17:25:30type: "contact"layout: "contact"---</code></pre><blockquote><p><strong>注</strong>：本留言板功能依赖于第三方评论系统，请<strong>激活</strong>你的评论系统才有效果。并且在主题的 <code>_config.yml</code> 文件中，第 <code>19</code> 至 <code>21</code> 行的“<strong>菜单</strong>”配置，取消关于留言板的注释即可</p></blockquote><h3 id="新建友情链接friends页"><a href="#新建友情链接friends页" class="headerlink" title="新建友情链接friends页"></a>新建友情链接friends页</h3><p><code>friends</code> 页是用来展示<strong>友情连接</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>friends/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new page <span class="token string">"friends"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/friends/index.md</code>，至少需要以下内容：</p><pre><code>---title: friendsdate: 2018-12-12 21:25:30type: "friends"layout: "friends"---</code></pre><p>同时，在你的博客 <code>source</code> 目录下新建 <code>_data</code> 目录，在 <code>_data</code> 目录中新建 <code>friends.json</code> 文件，文件内容如下所示：</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">[</span><span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/1_qq_27922023.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"码酱"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"我不是大佬，只是在追寻大佬的脚步"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://luokangyuan.com/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/4027734.jpeg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"闪烁之狐"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://blinkfox.github.io/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/avatar.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"ja_rome"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"平凡的脚步也可以走出伟大的行程"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://me.csdn.net/jlh912008548"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="菜单导航配置"><a href="#菜单导航配置" class="headerlink" title="菜单导航配置"></a>菜单导航配置</h3><ul><li>配置基本菜单导航的名称、路径url和图标icon.</li></ul><p>菜单导航名称可以是中文也可以是英文(如：<code>Index</code>或<code>主页</code>) 2.图标icon 可以在<a href="https://fontawesome.com/icons">Font Awesome</a> 中查找</p><pre class="line-numbers language-yml"><code class="language-yml">menu:  Index:    url: /    icon: fas fa-home  Tags:    url: /tags    icon: fas fa-tags  Categories:    url: /categories    icon: fas fa-bookmark  Archives:    url: /archives    icon: fas fa-archive  About:    url: /about    icon: fas fa-user-circle  Friends:    url: /friends    icon: fas fa-address-book<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>二级菜单配置方法</li></ul><p>如果你需要二级菜单则可以在原基本菜单导航的基础上如下操作<br>1.在需要添加二级菜单的一级菜单下添加<code>children</code>关键字(如:<code>About</code>菜单下添加<code>children</code>)<br>2.在<code>children</code>下创建二级菜单的 名称name,路径url和图标icon.<br>3.注意每个二级菜单模块前要加 <code>-</code>.<br>4.注意缩进格式</p><pre class="line-numbers language-yml"><code class="language-yml">menu:  Index:    url: /    icon: fas fa-home  Tags:    url: /tags    icon: fas fa-tags  Categories:    url: /categories    icon: fas fa-bookmark  Archives:    url: /archives    icon: fas fa-archive  About:    url: /about    icon: fas fa-user-circle-o  Friends:    url: /friends    icon: fas fa-address-book  Medias:    icon: fas fa-list    children:      - name: Musics        url: /musics        icon: fas fa-music      - name: Movies        url: /movies        icon: fas fa-film      - name: Books        url: /books        icon: fas fa-book      - name: Galleries        url: /galleries        icon: fas fa-image<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后就可以在文章中对应位置看到你用<code>emoji</code>语法写的表情了。</p><h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h3><p>由于 Hexo 自带的代码高亮主题显示不好看，所以主题中使用到了 <a href="https://github.com/ele828/hexo-prism-plugin">hexo-prism-plugin</a> 的 Hexo 插件来做代码高亮，安装命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">npm</span> i -S hexo-prism-plugin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并新增 <code>prism</code> 插件相关的配置，主要配置如下：</p><pre class="line-numbers language-yml"><code class="language-yml">highlight:  enable: falseprism_plugin:  mode: 'preprocess'    # realtime/preprocess  theme: 'tomorrow'  line_number: false    # default false  custom_css:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>本主题中还使用到了 <a href="https://github.com/wzpan/hexo-generator-search">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，安装命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> hexo-generator-search --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yml"><code class="language-yml">search:  path: search.xml  field: post<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="中文链接转拼音"><a href="#中文链接转拼音" class="headerlink" title="中文链接转拼音"></a>中文链接转拼音</h3><p>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 <code>SEO</code>，且 <code>gitment</code> 评论对中文链接也不支持。我们可以用 <a href="https://github.com/viko16/hexo-permalink-pinyin">hexo-permalink-pinyin</a> Hexo 插件使在生成文章时生成中文拼音的永久链接。</p><p>安装命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">npm</span> i hexo-permalink-pinyin --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yml"><code class="language-yml">permalink_pinyin:  enable: true  separator: '-' # default: '-'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注</strong>：除了此插件外，<a href="https://github.com/rozbo/hexo-abbrlink">hexo-abbrlink</a> 插件也可以生成非中文的链接。</p></blockquote><h3 id="文章字数统计插件"><a href="#文章字数统计插件" class="headerlink" title="文章字数统计插件"></a>文章字数统计插件</h3><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <a href="https://github.com/willin/hexo-wordcount">hexo-wordcount</a>插件。</p><p>安装命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">npm</span> i --save hexo-wordcount<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后只需在本主题下的 <code>_config.yml</code> 文件中，将各个文章字数相关的配置激活即可：</p><pre class="line-numbers language-yml"><code class="language-yml">postInfo:  date: true  update: false  wordCount: true # 设置文章字数统计为 true.  totalCount: true # 设置站点文章总字数统计为 true.  min2read: true # 阅读时长.  readCount: true # 阅读次数.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加emoji表情支持"><a href="#添加emoji表情支持" class="headerlink" title="添加emoji表情支持"></a>添加emoji表情支持</h3><p>本主题新增了对<code>emoji</code>表情的支持，使用到了 <a href="https://npm.taobao.org/package/hexo-filter-github-emojis">hexo-filter-github-emojis</a> 的 Hexo 插件来支持 <code>emoji</code>表情的生成，把对应的<code>markdown emoji</code>语法（<code>::</code>,例如：<code>:smile:</code>）转变成会跳跃的<code>emoji</code>表情，安装命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> hexo-filter-github-emojis --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yml"><code class="language-yml">githubEmojis:  enable: true  className: github-emoji  inject: true  styles:  customEmojis:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加-RSS-订阅支持"><a href="#添加-RSS-订阅支持" class="headerlink" title="添加 RSS 订阅支持"></a>添加 RSS 订阅支持</h3><p>本主题中还使用到了 <a href="https://github.com/hexojs/hexo-generator-feed">hexo-generator-feed</a> 的 Hexo 插件来做 <code>RSS</code>，安装命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> hexo-generator-feed --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yml"><code class="language-yml">feed:  type: atom  path: atom.xml  limit: 20  hub:  content:  content_limit: 140  content_limit_delim: ' '  order_by: -date<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后在 <code>public</code> 文件夹中即可看到 <code>atom.xml</code> 文件，说明你已经安装成功了。</p><h3 id="添加-DaoVoice-在线聊天功能"><a href="#添加-DaoVoice-在线聊天功能" class="headerlink" title="添加 DaoVoice 在线聊天功能"></a>添加 <a href="http://www.daovoice.io/">DaoVoice</a> 在线聊天功能</h3><p>前往 <a href="http://www.daovoice.io/">DaoVoice</a> 官网注册并且获取 <code>app_id</code>，并将 <code>app_id</code> 填入主题的 <code>_config.yml</code> 文件中。</p><h3 id="添加-Tidio-在线聊天功能"><a href="#添加-Tidio-在线聊天功能" class="headerlink" title="添加 Tidio 在线聊天功能"></a>添加 <a href="https://www.tidio.com/">Tidio</a> 在线聊天功能</h3><p>前往 <a href="https://www.tidio.com/">Tidio</a> 官网注册并且获取 <code>Public Key</code>，并将 <code>Public Key</code> 填入主题的 <code>_config.yml</code> 文件中。</p><h3 id="修改页脚"><a href="#修改页脚" class="headerlink" title="修改页脚"></a>修改页脚</h3><p>页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 <code>/layout/_partial/footer.ejs</code> 文件中，包括站点、使用的主题、访问量等。</p><h3 id="修改社交链接"><a href="#修改社交链接" class="headerlink" title="修改社交链接"></a>修改社交链接</h3><p>在主题的 <code>_config.yml</code> 文件中，默认支持 <code>QQ</code>、<code>GitHub</code> 和邮箱等的配置，你可以在主题文件的 <code>/layout/_partial/social-link.ejs</code> 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">if</span> <span class="token attr-name">(theme.socialLink.github)</span> <span class="token attr-name">{</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&lt;%<span class="token punctuation">=</span> theme.socialLink.github %<span class="token punctuation">></span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tooltipped<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token attr-name">data-tooltip</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>访问我的GitHub<span class="token punctuation">"</span></span> <span class="token attr-name">data-position</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>top<span class="token punctuation">"</span></span> <span class="token attr-name">data-delay</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fab fa-github<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，社交图标（如：<code>fa-github</code>）你可以在 <a href="https://fontawesome.com/icons">Font Awesome</a> 中搜索找到。以下是常用社交图标的标识，供你参考：</p><ul><li>Facebook: <code>fab fa-facebook</code></li><li>Twitter: <code>fab fa-twitter</code></li><li>Google-plus: <code>fab fa-google-plus</code></li><li>Linkedin: <code>fab fa-linkedin</code></li><li>Tumblr: <code>fab fa-tumblr</code></li><li>Medium: <code>fab fa-medium</code></li><li>Slack: <code>fab fa-slack</code></li><li>Sina Weibo: <code>fab fa-weibo</code></li><li>Wechat: <code>fab fa-weixin</code></li><li>QQ: <code>fab fa-qq</code></li><li>Zhihu: <code>fab fa-zhihu</code></li></ul><blockquote><p><strong>注意</strong>: 本主题中使用的 <code>Font Awesome</code> 版本为 <code>5.11.0</code>。</p></blockquote><h3 id="修改打赏的二维码图片"><a href="#修改打赏的二维码图片" class="headerlink" title="修改打赏的二维码图片"></a>修改打赏的二维码图片</h3><p>在主题文件的 <code>source/medias/reward</code> 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。</p><h3 id="文章加密"><a href="#文章加密" class="headerlink" title="文章加密"></a>文章加密</h3><p>主题 <code>config.yml</code> 配置文件中激活 <code>verifyPassword.enable: true</code> </p><p>在你所需要加密的文章中的 <code>Front-Matter</code> 中添加 <code>password</code> 属性，<code>password</code>的值为你的原密码经过 SHA256 加密后的值。访问文章就需要输入密码了，输入的为原密码。</p><h3 id="配置音乐播放器"><a href="#配置音乐播放器" class="headerlink" title="配置音乐播放器"></a>配置音乐播放器</h3><p>要支持音乐播放，在主题的 <code>_config.yml</code> 配置文件中激活music配置即可：</p><pre class="line-numbers language-yml"><code class="language-yml">music:  enable: true  title: 听听音乐 #非吸底模式有效    enable: true    show: 听听音乐  server: netease   #require    music platform: netease, tencent, kugou, xiami, baidu  type: playlist    #require song, playlist, album, search, artist  id: 503838841     #require    song id / playlist id / album id / search keyword  fixed: false       # 开启吸底模式  autoplay: false   # 是否自动播放  theme: '#42b983'  loop: 'all'       # 音频循环播放, 可选值: 'all', 'one', 'none'  order: 'random'   # 音频循环顺序, 可选值: 'list', 'random'  preload: 'auto'   # 预加载，可选值: 'none', 'metadata', 'auto'  volume: 0.7       # 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效  listFolded: true  # 列表默认折叠<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>server</code>可选网<code>netease</code>（网易云音乐），<code>tencent</code>（QQ音乐），<code>kugou</code>（酷狗音乐），<code>xiami</code>（虾米音乐），</p><p><code>baidu</code>（百度音乐）。</p><p><code>type</code>可选<code>song</code>（歌曲），<code>playlist</code>（歌单），<code>album</code>（专辑），<code>search</code>（搜索关键字），<code>artist</code>（歌手）</p><p><code>id</code>获取方法：网页打开例如网易云音乐，点击一个推荐的歌单，地址栏会有一个<code>id</code>，<code>id</code>即为这串数字。其中search的id为搜索的关键字。</p></blockquote><h3 id="文章-Front-matter-介绍"><a href="#文章-Front-matter-介绍" class="headerlink" title="文章 Front-matter 介绍"></a>文章 Front-matter 介绍</h3><h3 id="Front-matter-选项详解"><a href="#Front-matter-选项详解" class="headerlink" title="Front-matter 选项详解"></a>Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>cover</td><td><code>false</code></td><td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>keywords</td><td>文章标题</td><td>文章关键字，SEO 时需要</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2">开源中国在线工具</a>、<a href="http://encode.chahuo.com/">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx">站长工具</a>。</li><li>您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则</li></ol></blockquote><p>以下为文章的 <code>Front-matter</code> 示例。</p><h3 id="最简示例"><a href="#最简示例" class="headerlink" title="最简示例"></a>最简示例</h3><pre class="line-numbers language-markdown"><code class="language-markdown"><span class="token hr punctuation">---</span>title: typora-vue-theme主题介绍<span class="token title important">date: 2018-09-07 09:25:00<span class="token punctuation">---</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="最全示例"><a href="#最全示例" class="headerlink" title="最全示例"></a>最全示例</h3><pre class="line-numbers language-markdown"><code class="language-markdown"><span class="token hr punctuation">---</span>title: typora-vue-theme主题介绍date: 2018-09-07 09:25:00author: 赵奇img: /source/images/xxx.jpgtop: truecover: truecoverImg: /images/1.jpgpassword: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92toc: falsemathjax: falsesummary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要categories: Markdowntags:  <span class="token list punctuation">-</span> Typora  - <span class="token title important">Markdown<span class="token punctuation">---</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在本主题的 <code>_config.yml</code> 中可以修改部分自定义信息，有以下几个部分：</p><ul><li>菜单</li><li>我的梦想</li><li>首页的音乐播放器和视频播放器配置</li><li>是否显示推荐文章名称和按钮配置</li><li><code>favicon</code> 和 <code>Logo</code></li><li>个人信息</li><li>TOC 目录</li><li>文章打赏信息</li><li>复制文章内容时追加版权信息</li><li>MathJax</li><li>文章字数统计、阅读时长</li><li>点击页面的’爱心’效果</li><li>我的项目</li><li>我的技能</li><li>我的相册</li><li><code>Gitalk</code>、<code>Gitment</code>、<code>Valine</code> 和 <code>disqus</code> 评论配置</li><li><a href="http://busuanzi.ibruce.info/">不蒜子统计</a>和谷歌分析（<code>Google Analytics</code>）</li><li>默认特色图的集合。当文章没有设置特色图时，本主题会根据文章标题的 <code>hashcode</code> 值取余，来选择展示对应的特色图</li></ul><h3 id="修改主题颜色"><a href="#修改主题颜色" class="headerlink" title="修改主题颜色"></a>修改主题颜色</h3><p>主题会有一层变换的颜色笼罩在背景图上，在主题文件的 <code>/source/css/matery.css</code> 文件中，搜索 <code>.bg-color</code> 来修改背景颜色：</p><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */</span><span class="token selector"><span class="token class">.bg-color</span> </span><span class="token punctuation">{</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right, <span class="token hexcode">#4cbf30</span> <span class="token number">0%</span>, <span class="token hexcode">#0f9d58</span> <span class="token number">100%</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@-webkit-keyframes</span> rainbow</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">/* 动态切换背景颜色. */</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@keyframes</span> rainbow</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* 动态切换背景颜色. */</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*如果不需要，可以将上面三个注释掉*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果不需要的话，直接将上面三个注释掉即可。</p><h3 id="修改-banner-图和文章特色图"><a href="#修改-banner-图和文章特色图" class="headerlink" title="修改 banner 图和文章特色图"></a>修改 banner 图和文章特色图</h3><p>你可以直接在 <code>/source/medias/banner</code> 文件夹中更换你喜欢的 <code>banner</code> 图片，主题代码中是每天切换一张，只需 <code>7</code> 张即可。如果你会 <code>JavaScript</code> 代码，可以修改成你自己喜欢切换逻辑，如：随机切换等，<code>banner</code> 切换的代码位置在 <code>/layout/_partial/bg-cover-content.ejs</code> 文件的 `` 代码中：</p><pre class="line-numbers language-html"><code class="language-html">$('.bg-cover').css('background-image', 'url(/medias/banner/' + new Date().getDay() + '.jpg)');<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如想每小时切换,将<code>getDay()</code>改为<code>getHours()</code>即可,但是需要增加图片的数量为24，且在_config.yml中做修改相应。</p><p>在 <code>/source/medias/featureimages</code> 文件夹中默认有 24 张特色图片，你可以再增加或者减少，并需要在 <code>_config.yml</code> 做同步修改。</p><h3 id="添加文章评论插件"><a href="#添加文章评论插件" class="headerlink" title="添加文章评论插件"></a>添加文章评论插件</h3><p>主题自带<code>gittalk</code>,<code>gitment</code>,<code>valine</code>等评论插件，只需要去相应的官网注册，然后将相应的配置填入到主题的<code>_config.yml</code>中相应位置即可。</p><p>注：<code>gitalk</code>评论模块对文字表格有影响，并且经常加载不出来。</p><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><h3 id="配置CDN"><a href="#配置CDN" class="headerlink" title="配置CDN"></a>配置CDN</h3><p>cdn加速，只需要将主题文件夹下的<code>_config.yml</code>最后遗一行配置即可。后面填<code>https://cdn.jsdelivr.net/gh/</code>加上你的github账户名和你的博客地址，例如我的：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">jsDelivr</span><span class="token punctuation">:</span>  <span class="token key atrule">url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//cdn.jsdelivr.net/gh/axh2018/axh2018.github.io<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="压缩代码"><a href="#压缩代码" class="headerlink" title="压缩代码"></a>压缩代码</h3><p>安装插件：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-neat --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在根目录配置文件 <code>_config.yml</code> 末尾加入以下配置：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">#hexo-neat 优化提速插件（去掉HTML、css、js的blank字符）</span><span class="token key atrule">neat_enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">neat_html</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">exclude</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token string">'**/*.md'</span><span class="token key atrule">neat_css</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">exclude</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token string">'**/*.min.css'</span><span class="token key atrule">neat_js</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">mangle</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">output</span><span class="token punctuation">:</span>  <span class="token key atrule">compress</span><span class="token punctuation">:</span>  <span class="token key atrule">exclude</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token string">'**/*.min.js'</span>    <span class="token punctuation">-</span> <span class="token string">'**/**/instantpage.js'</span>    <span class="token punctuation">-</span> <span class="token string">'**/matery.js'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建404页面"><a href="#新建404页面" class="headerlink" title="新建404页面"></a>新建404页面</h3><p>主题并没有404页面，所以我们来添加一个，<code>source</code>目录下新建一个<code>404.md</code>，内容：</p><pre class="line-numbers language-markdown"><code class="language-markdown">title: 404date: 2020-2-22 19:20:00type: "404"layout: "404"description: "Oops～，我崩溃了！找不到你想要的页面 :("<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着在/matery/layout/新建一个404.ejs文件，内容：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token comment" spellcheck="true">/* don't remove. */</span>    <span class="token selector"><span class="token class">.about-cover</span> </span><span class="token punctuation">{</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">75</span>vh<span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bg-cover pd-header about-cover<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col s10 offset-s1 m8 offset-m2 l8 offset-l2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>brand<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title center-align<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        404                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>description center-align<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        &lt;%= page.description %>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">// 每天切换 banner 图. </span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.bg-cover'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background-image'</span><span class="token punctuation">,</span> <span class="token string">'url(/medias/banner/'</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.jpg)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文章生成永久链接"><a href="#文章生成永久链接" class="headerlink" title="文章生成永久链接"></a>文章生成永久链接</h3><p>主题默认的文章链接配置</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">premalink</span><span class="token punctuation">:</span> <span class="token punctuation">:</span>year/<span class="token punctuation">:</span>month/<span class="token punctuation">:</span>day/<span class="token punctuation">:</span>title<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这种生成的链接地址很长，我们可以修改文章生成链接的格式。</p><p>首先再根目录下执行下面的命令：</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> hexo-abbrlink --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在博客文件夹根目录下<code>_config.yml</code>添加如下配置</p><pre class="line-numbers language-yml"><code class="language-yml">abbrlink:    alg: crc16   #算法： crc16(default) and crc32    rep: hex     #进制： dec(default) and hex: dec                 #输出进制：十进制和十六进制，默认为10进制。丨dec为十进制，hex为十六进制<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>再将站点配置文件的<code>permalink</code>的值修改为：</p><pre class="line-numbers language-yml"><code class="language-yml">permalink: posts/:abbrlink.html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>生成文章的链接格式格式如下（官方样例）:</p><pre class="line-numbers language-yml"><code class="language-yml">crc16 & hexhttps://post.zz173.com/posts/66c8.htmlcrc16 & dechttps://post.zz173.com/posts/65535.htmlcrc32 & hexhttps://post.zz173.com/posts/8ddf18fb.htmlcrc32 & dechttps://post.zz173.com/posts/1690090958.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生成完后，原md文件的Front-matter 内会增加<code>abbrlink</code> 字段，值为生成的ID 。这个字段确保了在我们修改了<code>Front-matter</code> 内的博客标题title或创建日期date字段之后而不会改变链接地址。</p><h3 id="图片懒加载"><a href="#图片懒加载" class="headerlink" title="图片懒加载"></a>图片懒加载</h3><p><code>懒加载</code>一般是当图片滚动进可视窗口内才加载图片，可视窗口之外的图片则不加载</p><p>本主题图片进行懒加载，这样做效果就是 <code>html</code>、<code>css</code>、<code>js</code> 加载之后，图片再加载。既保证了网页的打开速度，也不会因图片的庞大体积而拖累了整个页面的加载。</p><p>先安装插件：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-lazyload-image --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后到博客根目录下<code>_config.yml</code>中加入以下字段：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 懒加载</span><span class="token key atrule">lazyload</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true"># 是否开启图片懒加载</span>  <span class="token key atrule">onlypost</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 是否只对文章的图片做懒加载</span>  <span class="token key atrule">loadingImg</span><span class="token punctuation">:</span> /images/loading.gif<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中gif图的位置应该放在<code>source/images/</code>下。</p><h3 id="设置文字模板"><a href="#设置文字模板" class="headerlink" title="设置文字模板"></a>设置文字模板</h3><p><code>Hexo</code>的页面是包括一个<code>md</code>文件和<code>ejs</code>文件结合而成的，<code>md</code>文件中的内容是页面配置，基本信息，和显示的内容。而<code>ejs</code>文件就是<code>js</code>逻辑代码了。</p><p>我们在<code>scaffolds/post.md</code>中设置文章的默认模板，这样以后创建文章的时候，这些信息就默认添加上了，不同文章你也可以修改这些信息。上面Front-matter已经介绍过了。</p><pre class="line-numbers language-markdown"><code class="language-markdown"><span class="token hr punctuation">---</span>title: {{ title }}date: {{ date }}author: 布莱恩特科比酱img:top:cover:coverImg:password:toc:mathjax:summary:categories:<span class="token title important">tags:<span class="token punctuation">---</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="图片添加水印"><a href="#图片添加水印" class="headerlink" title="图片添加水印"></a>图片添加水印</h3><p>为了防止别人抄袭你文章，直接用你文字的图片，可以把所有的图片都加上水印。在博客根目录下新建一个<code>watermark.py</code>，代码如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> sys<span class="token keyword">import</span> glob<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">from</span> PIL <span class="token keyword">import</span> ImageDraw<span class="token keyword">from</span> PIL <span class="token keyword">import</span> ImageFont<span class="token keyword">def</span> <span class="token function">watermark</span><span class="token punctuation">(</span>post_name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> post_name <span class="token operator">==</span> <span class="token string">'all'</span><span class="token punctuation">:</span>        post_name <span class="token operator">=</span> <span class="token string">'*'</span>    dir_name <span class="token operator">=</span> <span class="token string">'source/_posts/'</span> <span class="token operator">+</span> post_name <span class="token operator">+</span> <span class="token string">'/*'</span>    <span class="token keyword">for</span> files <span class="token keyword">in</span> glob<span class="token punctuation">.</span>glob<span class="token punctuation">(</span>dir_name<span class="token punctuation">)</span><span class="token punctuation">:</span>        im <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span>files<span class="token punctuation">)</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>im<span class="token punctuation">.</span>getbands<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">:</span>            im <span class="token operator">=</span> im<span class="token punctuation">.</span>convert<span class="token punctuation">(</span><span class="token string">'RGB'</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span>        font <span class="token operator">=</span> ImageFont<span class="token punctuation">.</span>truetype<span class="token punctuation">(</span><span class="token string">'STSONG.TTF'</span><span class="token punctuation">,</span> max<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>im<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        draw <span class="token operator">=</span> ImageDraw<span class="token punctuation">.</span>Draw<span class="token punctuation">(</span>im<span class="token punctuation">)</span>        draw<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">(</span>im<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> im<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                  u<span class="token string">'@hiyoung'</span><span class="token punctuation">,</span> fill<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> font<span class="token operator">=</span>font<span class="token punctuation">)</span>        im<span class="token punctuation">.</span>save<span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        watermark<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[usage] &lt;input>'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>字体也放根目录下，自己找字体。然后每次写完一篇文章可以运行<code>python3 watermark.py postname</code>添加水印，如果第一次运行要给所有文章添加水印，可以运行<code>python3 watermark.py all</code>。</p><p>这个代码的逻辑就是从文章目录下拿到图片，添加水印。这个前提是要文章的图片放在source/_posts/下，所以如果在文章中直接引用了其他地方的图片链接，那么这个脚本不会去给那个图片加水印了。</p><h3 id="动态标签栏"><a href="#动态标签栏" class="headerlink" title="动态标签栏"></a>动态标签栏</h3><p>在<code>theme/matery/layout/layout.ejs</code>下添加如下代码：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span> <span class="token string">"text/javascript"</span> <span class="token operator">></span>    <span class="token keyword">var</span> OriginTitile<span class="token operator">=</span>document<span class="token punctuation">.</span>title<span class="token punctuation">,</span>st<span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"visibilitychange"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>        document<span class="token punctuation">.</span>hidden<span class="token operator">?</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>title<span class="token operator">=</span><span class="token string">"ヽ(●-`Д´-)ノ你要玩捉迷藏嘛"</span><span class="token punctuation">,</span><span class="token function">clearTimeout</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>title<span class="token operator">=</span><span class="token string">"(Ő∀Ő3)ノ被发现啦！"</span><span class="token punctuation">,</span>st<span class="token operator">=</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            document<span class="token punctuation">.</span>title<span class="token operator">=</span>OriginTitile<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">3e3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改导航栏颜色以及透明效果"><a href="#修改导航栏颜色以及透明效果" class="headerlink" title="修改导航栏颜色以及透明效果"></a>修改导航栏颜色以及透明效果</h3><p><code>themes/matery/source/css/matery.css</code>文件中，有一个<code>.bg-color</code>属性，修改其属性值即可，代码如下：</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.bg-color</span> </span><span class="token punctuation">{</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right, <span class="token hexcode">#4cbf30</span> <span class="token number">0%</span>, <span class="token hexcode">#0f9d58</span> <span class="token number">100%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     //修改成自己喜欢的颜色值    <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0.8</span><span class="token punctuation">;</span>      //透明效果 值范围 <span class="token number">0</span>~<span class="token number">1</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="外链跳转插件"><a href="#外链跳转插件" class="headerlink" title="外链跳转插件"></a>外链跳转插件</h3><p>跳转外链相关插件。自动为所有<code>html</code>文件中外链的<code>a</code>标签生成对应的属性。 比如 设置 <code>target='_blank'</code>, <code>rel='external nofollow noopener noreferrer'</code> 告诉搜索引擎这是外部链接,不要将该链接计入权重。 同时自动生成外链跳转页面,默认在根目录下<code>go.html</code>;</p><p>安装插件：</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> hexo-external-link --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>配置插件：</p><p>在<code>Hexo</code>根目录的<code>_config.yml</code>文件中添加如下配置。</p><pre class="line-numbers language-yml"><code class="language-yml">hexo_external_link:  enable: true  enable_base64_encode: true  url_param_name: 'u'  html_file_name: 'go.html'  target_blank: true  link_rel: 'external nofollow noopener noreferrer'  domain: 'your_domain' # 如果开启了防盗链  safety_chain: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>enable</strong> - 是否开启<code>hexo_external_link</code>插件 - 默认 false</li><li><strong>enable_base64_encode</strong> - 是否对跳转<code>url</code>使用<code>base64编码</code> - 默认 fasle</li><li><strong>url_param_name</strong> - url参数名,在跳转到外链传递给<code>html_file_name</code>的参数名 - 默认 ‘u’</li><li><strong>html_file_name</strong> - 跳转到外链的页面文件路径 - 默认 ‘go.html’</li><li><strong>target_blank</strong> - 是否为外链的<code>a</code>标签添加<code>target='_blank'</code> - 默认 true</li><li><strong>link_rel</strong> - 设置外链的<code>a</code>标签的rel属性 - 默认 ‘external nofollow noopener noreferrer’</li><li><strong>domain</strong> - 如果开启了防盗链,除了 localhost 和 domain 之外调用会跳到主页,同时也是判断链接是否为外链的依据 - 默认 window.location.host</li><li><strong>safety_chain</strong> - go.html 为了防止外链盗用 对域名进行的判断 - 默认 false</li></ul><h3 id="添加鼠标点击烟花爆炸效果"><a href="#添加鼠标点击烟花爆炸效果" class="headerlink" title="添加鼠标点击烟花爆炸效果"></a>添加鼠标点击烟花爆炸效果</h3><p><code>themes/matery/source/js</code>目录下新建<code>fireworks.js</code>文件，打开<a href="https://github.com/axh2018/script/blob/master/fireworks.js"></a>将内容复制粘贴到<code>fireworks.js</code>。</p><p>然后在<code>themes/matery/layout/layout.ejs</code>文件内添加以下内容：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>canvas <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fireworks"</span> style<span class="token operator">=</span><span class="token string">"position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;"</span> <span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>canvas<span class="token operator">></span> <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"//cdn.bootcss.com/animejs/2.2.0/anime.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span> <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"/js/fireworks.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="添加樱花飘落效果"><a href="#添加樱花飘落效果" class="headerlink" title="添加樱花飘落效果"></a>添加樱花飘落效果</h3><p>在<code>themes/matery/source/js</code>目录下新建<code>sakura.js</code>文件，打开<a href="https://github.com/axh2018/script/blob/master/sakura.js"></a><br>将内容复制粘贴到<code>sakura.js</code>。</p><p>然后在<code>themes/matery/layout/layout.ejs</code>文件内添加以下内容：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token comment" spellcheck="true">//只在桌面版网页启用特效</span><span class="token keyword">var</span> windowWidth <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>windowWidth <span class="token operator">></span> <span class="token number">768</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'&lt;script type="text/javascript" src="/js/sakura.js">&lt;\/script>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加鼠标彩虹星星掉落跟随效果"><a href="#添加鼠标彩虹星星掉落跟随效果" class="headerlink" title="添加鼠标彩虹星星掉落跟随效果"></a>添加鼠标彩虹星星掉落跟随效果</h3><p>在<code>themes/matery/source/js</code>目录下新建<code>cursor.js</code>文件，打开<a href="https://github.com/axh2018/script/blob/master/cursor.js"></a><br>将内容复制粘贴到<code>cursor.js</code>。</p><p>然后在<code>themes/matery/layout/layout.ejs</code>文件内添加以下内容：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"/js/snow.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="添加雪花飘落效果"><a href="#添加雪花飘落效果" class="headerlink" title="添加雪花飘落效果"></a>添加雪花飘落效果</h3><p>在<code>themes/matery/source/js</code>目录下新建<code>cursor.js</code>文件，打开<a href="https://github.com/axh2018/script/blob/master/snow.js">https://github.com/axh2018/script/blob/master/snow.js</a><br>将内容复制粘贴到<code>cursor.js</code>。</p><p>然后在<code>themes/matery/layout/layout.ejs</code>文件内添加以下内容：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"/js/snow.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="添加鼠标点击文字特效"><a href="#添加鼠标点击文字特效" class="headerlink" title="添加鼠标点击文字特效"></a>添加鼠标点击文字特效</h3><p>主题文件下的<code>/source/js/</code>下新建<code>click_show_text.js</code>，以下代码添到<code>js</code>中：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a_idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">jQuery</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>$<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"body"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token string">"富强"</span><span class="token punctuation">,</span> <span class="token string">"民主"</span><span class="token punctuation">,</span> <span class="token string">"文明"</span><span class="token punctuation">,</span> <span class="token string">"和谐"</span><span class="token punctuation">,</span> <span class="token string">"自由"</span><span class="token punctuation">,</span> <span class="token string">"平等"</span><span class="token punctuation">,</span> <span class="token string">"公正"</span><span class="token punctuation">,</span> <span class="token string">"法治"</span><span class="token punctuation">,</span> <span class="token string">"爱国"</span><span class="token punctuation">,</span> <span class="token string">"敬业"</span><span class="token punctuation">,</span> <span class="token string">"诚信"</span><span class="token punctuation">,</span> <span class="token string">"友善"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> $i <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"&lt;span/>"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>a_idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a_idx <span class="token operator">=</span> <span class="token punctuation">(</span>a_idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">var</span> x <span class="token operator">=</span> e<span class="token punctuation">.</span>pageX<span class="token punctuation">,</span>            y <span class="token operator">=</span> e<span class="token punctuation">.</span>pageY<span class="token punctuation">;</span>        $i<span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token string">"z-index"</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>            <span class="token string">"top"</span><span class="token punctuation">:</span> y <span class="token operator">-</span> <span class="token number">20</span><span class="token punctuation">,</span>            <span class="token string">"left"</span><span class="token punctuation">:</span> x<span class="token punctuation">,</span>            <span class="token string">"position"</span><span class="token punctuation">:</span> <span class="token string">"absolute"</span><span class="token punctuation">,</span>            <span class="token string">"font-weight"</span><span class="token punctuation">:</span> <span class="token string">"bold"</span><span class="token punctuation">,</span>            <span class="token string">"color"</span><span class="token punctuation">:</span> <span class="token string">"#FF0000"</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"body"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>$i<span class="token punctuation">)</span><span class="token punctuation">;</span>        $i<span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                <span class="token string">"top"</span><span class="token punctuation">:</span> y <span class="token operator">-</span> <span class="token number">180</span><span class="token punctuation">,</span>                <span class="token string">"opacity"</span><span class="token punctuation">:</span> <span class="token number">0</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token number">3000</span><span class="token punctuation">,</span>            <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                $i<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token string">'delay()'</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".buryit"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeAttr</span><span class="token punctuation">(</span><span class="token string">"onclick"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="增加建站时间"><a href="#增加建站时间" class="headerlink" title="增加建站时间"></a>增加建站时间</h3><p>只需将主题的<code>_config.yml</code>中的<code>time</code>设置为<code>true</code>即可：</p><pre class="line-numbers language-yml"><code class="language-yml"># Website start time.# 站点运行开始时间.time:  enable: trues  year: 2019 # 年份  month: 11 # 月份  date: 30 # 日期  hour: 17 # 小时  minute: 30 # 分钟  second: 00 # 秒<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加博客天气插件"><a href="#添加博客天气插件" class="headerlink" title="添加博客天气插件"></a>添加博客天气插件</h3><p>去中国天气网<a></a><a href="https://cj.weather.com.cn/plugin/pc">https://cj.weather.com.cn/plugin/pc</a>可以获取一段定制的天气代码，将这段代码添加到</p><p> <code>/themes/matery/layout/layout.ejs </code>即可，例如：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> my_weather天气 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>        WIDGET <span class="token operator">=</span> <span class="token punctuation">{</span>FID<span class="token punctuation">:</span> <span class="token string">'QIqG0hDUBi'</span><span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"https://apip.weatherdt.com/float/static/js/r.js?v=1111"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加live2d模型"><a href="#添加live2d模型" class="headerlink" title="添加live2d模型"></a>添加live2d模型</h3><p>安装插件：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save hexo-helper-live2d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装模型：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save hexo-helper-live2d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>配置：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">live2d</span><span class="token punctuation">:</span>    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">scriptFrom</span><span class="token punctuation">:</span> local    <span class="token key atrule">pluginRootPath</span><span class="token punctuation">:</span> live2dw/    <span class="token key atrule">pluginJsPath</span><span class="token punctuation">:</span> lib/    <span class="token key atrule">pluginModelPath</span><span class="token punctuation">:</span> assets/    <span class="token key atrule">tagMode</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token key atrule">log</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token key atrule">model</span><span class="token punctuation">:</span>        <span class="token key atrule">use</span><span class="token punctuation">:</span> live2d<span class="token punctuation">-</span>widget<span class="token punctuation">-</span>model<span class="token punctuation">-</span>shizuku    <span class="token key atrule">display</span><span class="token punctuation">:</span>        <span class="token key atrule">position</span><span class="token punctuation">:</span> right        <span class="token key atrule">width</span><span class="token punctuation">:</span> <span class="token number">150</span>        <span class="token key atrule">height</span><span class="token punctuation">:</span> <span class="token number">300</span>    <span class="token key atrule">mobile</span><span class="token punctuation">:</span>        <span class="token key atrule">show</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token key atrule">react</span><span class="token punctuation">:</span>        <span class="token key atrule">opacity</span><span class="token punctuation">:</span> <span class="token number">0.7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中模型你可以更改，想了解更多，请移步官网<a href="https://github.com/EYHN/hexo-helper-live2d/blob/master/README.zh-CN.md">https://github.com/EYHN/hexo-helper-live2d/blob/master/README.zh-CN.md</a></p><h3 id="背景动态彩带"><a href="#背景动态彩带" class="headerlink" title="背景动态彩带"></a>背景动态彩带</h3><p>只需将<code>matery/_config.yml</code>中<code>canvas_nest</code>设置为<code>true</code>即可：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 背景静止彩带.</span><span class="token key atrule">ribbon</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">size</span><span class="token punctuation">:</span> <span class="token number">150 </span><span class="token comment" spellcheck="true"># 彩带大小, 默认: 90.</span>  <span class="token key atrule">alpha</span><span class="token punctuation">:</span> <span class="token number">0.6 </span><span class="token comment" spellcheck="true"># 彩带透明度 (0 ~ 1), 默认: 0.6.</span>  <span class="token key atrule">zIndex</span><span class="token punctuation">:</span> <span class="token number">-1 </span><span class="token comment" spellcheck="true"># 背景的z-index属性，css属性用于控制所在层的位置, 默认: -1.</span>  <span class="token key atrule">clickChange</span><span class="token punctuation">:</span> <span class="token boolean important">false  </span><span class="token comment" spellcheck="true"># 设置是否每次点击都更换彩带.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="背景动态线条"><a href="#背景动态线条" class="headerlink" title="背景动态线条"></a>背景动态线条</h3><p>只需将<code>matery/_config.yml</code>中<code>ribbon_dynamic</code>设置为<code>true</code>即可：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">ribbon_dynamic</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注：加载这些样式非常耗资源。</p><h3 id="添加反爬虫协议"><a href="#添加反爬虫协议" class="headerlink" title="添加反爬虫协议"></a>添加反爬虫协议</h3><p>robots是网站跟爬虫间的协议，用简单直接的txt格式文本方式告诉对应的爬虫被允许的权限，也就是说robots.txt是搜索引擎中访问网站的时候要查看的第一个文件。当一个搜索蜘蛛访问一个站点时，它会首先检查该站点根目录下是否存在robots.txt，如果存在，搜索机器人就会按照该文件中的内容来确定访问的范围；如果该文件不存在，所有的搜索蜘蛛将能够访问网站上所有没有被口令保护的页面。</p><p>我们在hexo 根目录下的 <code>public</code> 目录下新建一个<code>robots.txt</code>文件，内容如下：</p><pre class="line-numbers language-txt"><code class="language-txt">User-agent: *Allow: /Allow: /archives/Allow: /categories/Allow: /tags/DisAllow: /about/Disallow: /friends/Disallow: /contact/Sitemap: https://axh2018.cn/sitemap.xmlSitemap: https://axh2018.cn/baidu_sitemap.xml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你可自定义哪些内容可以被爬取，哪些内容不能。</p><p>参考</p><ul><li><a href="https://chinatianyunfeng.github.io/posts/63466.html#toc-heading-8">https://chinatianyunfeng.github.io/posts/63466.html#toc-heading-8</a></li><li><a href="https://yafine-blog.cn/posts/4ab2.html#toc-heading-55">https://yafine-blog.cn/posts/4ab2.html#toc-heading-55</a></li><li><a href="https://sunhwee.com/posts/6e8839eb.html#toc-heading-37">https://sunhwee.com/posts/6e8839eb.html#toc-heading-37</a></li><li><a href="https://github.com/blinkfox/hexo-theme-matery">https://github.com/blinkfox/hexo-theme-matery</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker运行酷Q</title>
      <link href="posts/a01a.html"/>
      <url>posts/a01a.html</url>
      
        <content type="html"><![CDATA[<p>CentOS运行酷Q需要<a href=" https://www.docker.com/ ">docker</a>的加持，什么是docker?</p><p> Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的 Linux或Windows 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。 </p><ol><li>卸载Docker旧版本(如果存在的情况下)</li></ol><pre class="line-numbers language-bash"><code class="language-bash">yum -y remove docker docker-engine docker-common docker-selinux<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>安装依赖软件包</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> yum <span class="token function">install</span> -y yum-utils device-mapper-persistent-data  lvm2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>安装Docker</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> yum update<span class="token function">sudo</span> yum <span class="token function">install</span> docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="4"><li>启动Docker</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> systemctl start docker<span class="token function">sudo</span> <span class="token function">enable</span> docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="5"><li>验证是否安装成功</li></ol><pre class="line-numbers language-bash"><code class="language-bash">docker --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="6"><li>阿里云镜像加速&lt;**注意,这点非常重要,不用加速,你可能pull一个coolq的镜像需要几个小时**&gt;</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">mkdir</span> -p /etc/dockervim /etc/docker/daemon.json<span class="token function">sudo</span> <span class="token function">tee</span> /etc/docker/daemon.json <span class="token operator">&lt;&lt;</span>-<span class="token string">'EOF'</span><span class="token punctuation">{</span>  <span class="token string">"registry-mirrors"</span><span class="token keyword">:</span> <span class="token punctuation">[</span><span class="token string">"https://dttr1kms.mirror.aliyuncs.com"</span><span class="token punctuation">]</span><span class="token punctuation">}</span>EOF<span class="token function">sudo</span> systemctl daemon-reload<span class="token function">sudo</span> systemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>卸载docker</p><pre class="line-numbers language-bash"><code class="language-bash">systemctl stop dockeryum -y remove docker-ce<span class="token function">rm</span> -rf /var/lib/docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>那么接下来我们就来在CentOS的服务器上运行酷Q</p><ul><li>开启Docker<pre class="line-numbers language-bash"><code class="language-bash">systemctl start docker <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><ol><li>拉取coolq镜像<pre class="line-numbers language-bash"><code class="language-bash">docker pull coolq/wine-coolq<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>然后创建一个存放数据的文件夹<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">mkdir</span> /root/coolq-data<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>运行酷Q<pre class="line-numbers language-bash"><code class="language-bash">docker run --name<span class="token operator">=</span>coolq -d -p 8080:9000 -v /root/coolq-data:/home/user/coolq -e VNC_PASSWD<span class="token operator">=</span>123456 -e COOLQ_ACCOUNT<span class="token operator">=</span>123456 coolq/wine-coolq<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>然后打开浏览器输入你的  IP:8080   就可以访问VNC了，密码是上面设置的123456</li></ol><p><strong>注意，此时你可能通过浏览器输入你的IP加端口不能访问到VNC界面，因为还没开放相应端口，去服务器后台安全组开放端口</strong></p><p>更多有趣的酷Q插件，请访问<a href="https://cqp.cc/b/app">cpp.cc/b/cpp</a></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装ArchLinux</title>
      <link href="posts/d698.html"/>
      <url>posts/d698.html</url>
      
        <content type="html"><![CDATA[<h3 id="系统安装"><a href="#系统安装" class="headerlink" title="系统安装"></a>系统安装</h3><blockquote><p>这里的教程适用于UEFI+BIOS启动</p></blockquote><blockquote><p>装的过程需要联网</p></blockquote><h3 id="1-连接网络"><a href="#1-连接网络" class="headerlink" title="1. 连接网络"></a>1. 连接网络</h3><p>推荐手机USB共享网络</p><h3 id="扫描当前互联网设备"><a href="#扫描当前互联网设备" class="headerlink" title="扫描当前互联网设备"></a>扫描当前互联网设备</h3><pre class="line-numbers language-bash"><code class="language-bash">ip <span class="token function">link</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  <b>1.2 启用设备</b></p><pre class="line-numbers language-bash"><code class="language-bash">ip <span class="token function">link</span> <span class="token keyword">set</span> 设备名 up<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  <b>1.3 扫描WiFi</b></p><pre class="line-numbers language-bash"><code class="language-bash">iwlist 设备名 scan <span class="token operator">|</span> <span class="token function">grep</span> ESSID<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>   <b>1.4 连接网络</b></p><pre class="line-numbers language-bash"><code class="language-bash">wpa_passphrase SSID <span class="token function">passwd</span> <span class="token operator">></span> internet.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>   <b>分配IP</b></p><pre class="line-numbers language-bash"><code class="language-bash">systemctl  start dhcdcp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>   <b>1.6 测试连上网络</b></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ping</span> www.baidu.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    <strong>能ping通即可</strong></p><h3 id="2-设置时区"><a href="#2-设置时区" class="headerlink" title="2. 设置时区"></a>2. 设置时区</h3><pre class="line-numbers language-bash"><code class="language-bash">timedatectl set-ntp <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3>3.分区</h3>&gt; 我这里装到sda上,且sda 大小为64g,要查看你的分区表，可以`$ fdisk -l` <p>​    <b>3.1 编辑磁盘</b></p><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token function">fdisk</span> /dev/sda   <span class="token comment" spellcheck="true">#给sda分区</span> g   <span class="token comment" spellcheck="true"># 清除原有分区并创建一个GPT分区表</span> n   <span class="token comment" spellcheck="true"># 创建一个新的分区/dev/sda1 -- 引导分区</span>     <span class="token comment" spellcheck="true"># 接下来选择分区编号、起始位置、终止位置（分区大小，可用“+300M”的形式）</span> n   <span class="token comment" spellcheck="true"># 创建一个swap分区/dev/sda3 -- SWAP分区（虚拟内存分区,分区不需要太大）</span>      <span class="token comment" spellcheck="true">#我设置为1G</span> n   <span class="token comment" spellcheck="true"># 创建一个新的分区/dev/sda2 -- 主分区</span>     <span class="token comment" spellcheck="true"># 大小我设置为磁盘的所有剩余空间</span> p   <span class="token comment" spellcheck="true"># 查看分区结果</span> w   <span class="token comment" spellcheck="true"># 写入</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    <b>3.2 格式化每个分区</b></p><pre class="line-numbers language-bash"><code class="language-bash">mkfs.fat  -F32   /dev/sda1mkfs.ext4        /dev/sda2mkswap           /dev/sda3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​    <b>3.3 打开swap</b></p><pre class="line-numbers language-bash"><code class="language-bash">swapon           /dev/sda3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3>4.换源</h3>* <b>编辑 /etc/pacman.d/mirrorlist</b><br>* <b>将第一个China下面的Server一行移到最顶上</b><h3>5.安装ArchLinux</h3>  <b>5.1 挂载磁盘</b><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">mkdir</span>         /mnt/boot                  <span class="token comment" spellcheck="true">#创建启动分区</span><span class="token function">mount</span>      /dev/sda1   /mnt/boot       <span class="token comment" spellcheck="true">#挂载启动分区</span><span class="token function">mount</span>      /dev/sda2    /mnt             <span class="token comment" spellcheck="true">#挂载主分区</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>  <b>5.2 开始 安装</b></p><pre class="line-numbers language-bash"><code class="language-bash">pacstrap    /mnt base linux linux-firmware   <span class="token comment" spellcheck="true"># 安装Linux基础的软件</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​     <b>5.3生成fstab文件</b></p><pre class="line-numbers language-bash"><code class="language-bash">genfstab -U   /mnt   <span class="token operator">>></span>   /mnt/etc/fstab<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3>6.进入安装好的系统,设置一些本地化操作</h3>​    <b>6.1 进入系统</b> <pre class="line-numbers language-bash"><code class="language-bash">arch-chroot     /mnt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>   <b>6.2 设置时区</b></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ln</span> -sf     /usr/share/zoneinfo/Asia/Shanghai     /etc/localtime <span class="token comment" spellcheck="true">#创建软连接</span>hwclock --systohc                                        <span class="token comment" spellcheck="true">#同步时间</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>   <b>6.3设置语言</b></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">echo</span> LANG<span class="token operator">=</span>en_US.UTF-8    <span class="token operator">></span>    /etc/locale.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    <b>6.4 设置主机名</b></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">echo</span>   arch    <span class="token operator">></span>    /etc/hostname<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    <b>6.5编辑hosts</b></p><pre class="line-numbers language-bash"><code class="language-bash">vim            /etc/hosts       <span class="token comment" spellcheck="true">#其中加入以下几行 </span>127.0.0.1     localhost::1          localhost127.0.1.1      arch.localdomain   arch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>   <b>6.6设置root密码</b></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">passwd</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3>7.设置引导</h3><pre class="line-numbers language-bash"><code class="language-bash">pacman -S     grub    efibootmgr  intel-ucode  os-prober <span class="token function">mkdir</span>     /mnt/boot/grubgrub-mkconfig    <span class="token operator">></span>  /boot/grub/grub.cfggrub-install    --target<span class="token operator">=</span>x86_64-efi    --efi-directory<span class="token operator">=</span>/boot<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3>8.安装一些基本工具</h3><pre class="line-numbers language-bash"><code class="language-bash">pacman -S vim <span class="token function">nano</span> <span class="token function">vi</span> dialog wpa_supplicant networkmanager dhcpcd net-tools  zsh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3>9.设置自启dhcpcd 服务</h3><pre class="line-numbers language-bash"><code class="language-bash">systemctl <span class="token function">enable</span> dhcpcd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3>10.重启</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">exit</span>                            <span class="token comment" spellcheck="true"># 退出arch-chroot</span><span class="token function">killall</span> wpa_supplicant dhcpcd   <span class="token comment" spellcheck="true"># 终止掉网络相关的进程</span><span class="token function">reboot</span>                          <span class="token comment" spellcheck="true"># 重启，关机后就可以拔掉USB</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Arch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Arch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown入门指南</title>
      <link href="posts/9c48.html"/>
      <url>posts/9c48.html</url>
      
        <content type="html"><![CDATA[<h2 align="center">Markdown入门指南</h2><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><h3 id="1-1-设计理念"><a href="#1-1-设计理念" class="headerlink" title="1.1 设计理念"></a>1.1 设计理念</h3><ul><li>Markdown 易于阅读，方便创作web文档，利于各平台无缝分发。</li><li>Markdown 语法灵感最大的来源还是纯文本 email 的格式，完全由标点符号标签组成的纯文本。</li><li>Markdown 文件应该以纯文本形式原样发布，不应该包含标记标签和格式化指令。</li></ul><h3 id="1-2-内联-HTML-语法"><a href="#1-2-内联-HTML-语法" class="headerlink" title="1.2 内联 HTML 语法"></a>1.2 内联 HTML 语法</h3><ul><li>HTML 是一种<strong>发布格式</strong>，Markdown 是一种<strong>创作格式</strong>。</li><li>Markdown语法集合比较小，只是HTML标签的一小部分。</li><li>对于 Markdown 中未包含的标签, 可以直接使用 HTML标签，例如用 HTML <code>&lt;a&gt;</code> 标签替代 Markdown 的链接语法。</li></ul><h3 id="1-3-特殊字符自动转义"><a href="#1-3-特殊字符自动转义" class="headerlink" title="1.3 特殊字符自动转义"></a>1.3 特殊字符自动转义</h3><p>  在 HTML 中, 有两个字符需要特殊对待: &lt; 和 &amp;，左尖括号用于起始标签。如果你想将它们用作字面量, 你必须将它们转义为字符实体, 例如<code>&lt;</code> 和 <code>&amp;</code>。</p><h2 id="二、行内语法讲解"><a href="#二、行内语法讲解" class="headerlink" title="二、行内语法讲解"></a>二、行内语法讲解</h2><h3 id="2-1-注释的表述"><a href="#2-1-注释的表述" class="headerlink" title="2.1 注释的表述"></a>2.1 注释的表述</h3><ul><li><strong>代码法</strong></li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">='</span><span class="token attr-value"><span class="token property">display</span><span class="token punctuation">:</span> none</span><span class="token punctuation">'</span></span><span class="token punctuation">></span></span>哈哈我是注释，不会在浏览器中显示。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><strong>html注释</strong></li></ul><p>既然支持html语法，那也支持html注释，快捷键 comment + /。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--哈哈我是注释，不会在浏览器中显示。--></span><span class="token comment" spellcheck="true">&lt;!--哈哈我是多段注释，不会在浏览器中显示。    --></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>hack方法</strong></li></ul><p>hack方法就是利用markdown的解析原理来实现注释的。<br> 一般有的markdown解析器不支持上面的注释方法，这个时候就可以用hack方法。<br> hack方法比上面2种方法稳定得多，但是语义化太差。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token punctuation">[</span><span class="token comment" spellcheck="true">//]: # (哈哈我是最强注释，不会在浏览器中显示。)</span><span class="token punctuation">[</span><span class="token operator">^</span>_<span class="token operator">^</span><span class="token punctuation">]</span><span class="token punctuation">:</span> # <span class="token punctuation">(</span>哈哈我是最萌注释，不会在浏览器中显示。<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token comment" spellcheck="true">//]: &lt;> (哈哈我是注释，不会在浏览器中显示。)</span><span class="token punctuation">[</span>comment<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token operator">&lt;</span><span class="token operator">></span> <span class="token punctuation">(</span>哈哈我是注释，不会在浏览器中显示。<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-分级标题、任务列表"><a href="#2-2-分级标题、任务列表" class="headerlink" title="2.2 分级标题、任务列表"></a>2.2 分级标题、任务列表</h3><ul><li><strong>分级标题</strong></li></ul><pre class="line-numbers language-xml"><code class="language-xml"># 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题  <span class="token comment" spellcheck="true">&lt;!--最多6级标题--></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于用了标记编辑器会把所有标题写到目录大纲中，在这里写的演示标题也会列进去，所以就不演示了。同学们自己在编辑器中观察，很简单，一级标题字号最大，依级递减。</p><ul><li><strong>任务列表</strong></li></ul><p>Markdown 语法：</p><pre class="line-numbers language-css"><code class="language-css">- [ ] 任务一 未做任务 `- + 空格 + [ ]`- [x] 任务二 已做任务 `- + 空格 + [x]`<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>效果如下：</p><ul><li> 任务一 未做任务 <code>- + 空格 + [ ]</code></li><li> 任务二 已做任务 <code>- + 空格 + [x]</code></li></ul><h3 id="2-3-缩进、换行、空行、对齐方式"><a href="#2-3-缩进、换行、空行、对齐方式" class="headerlink" title="2.3 缩进、换行、空行、对齐方式"></a>2.3 缩进、换行、空行、对齐方式</h3><ul><li><strong>首行缩进</strong></li></ul><p>不同特殊占位符所占空白是不一样大的。</p><pre class="line-numbers language-bash"><code class="language-bash">【1】 <span class="token operator">&amp;</span>emsp<span class="token punctuation">;</span>或<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#8195; //全角</span>【2】 <span class="token operator">&amp;</span>ensp<span class="token punctuation">;</span>或<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#8194; //半角</span>【3】 <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>或<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#160;  //半角之半角</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><strong>换行</strong></li></ul><p>由于markdown编辑器的不同,可能在一行字后面，直接换行回车，也能实现换行，但是在Visual Studio Code上，想要<strong>换行必须得在一行字后面空两个格子才行</strong>。</p><ul><li><strong>空行</strong></li></ul><p>在编辑的时候有多少个空行(只要这一行只有回车或者space没有其他的字符就算空行)，在<strong>渲染之后，只隔着一行</strong>。</p><ul><li><strong>对齐方式</strong></li></ul><p>代码：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span>行中心对齐<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>行左对齐<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>行右对齐<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>显示效果：</p><center>行中心对齐</center> <p align="left">行左对齐</p> <p align="right">行右对齐</p><h3 id="2-4-斜体、粗体、删除线、下划线、背景高亮"><a href="#2-4-斜体、粗体、删除线、下划线、背景高亮" class="headerlink" title="2.4 斜体、粗体、删除线、下划线、背景高亮"></a>2.4 斜体、粗体、删除线、下划线、背景高亮</h3><ul><li>代码：</li></ul><pre class="line-numbers language-undefined"><code class="language-undefined">*斜体*或_斜体_**粗体*****加粗斜体***~~删除线~~++下划线++==背景高亮==<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>显示效果：</li></ul><p>  <em>斜体</em>    <strong>粗体</strong>   <strong><em>加粗斜体\</em></strong>   <del>删除线</del>   ++删除线++   ==背景高亮==</p><h3 id="2-5-超链接、页内链接、自动链接、注脚"><a href="#2-5-超链接、页内链接、自动链接、注脚" class="headerlink" title="2.5 超链接、页内链接、自动链接、注脚"></a>2.5 超链接、页内链接、自动链接、注脚</h3><ul><li><strong>行内式</strong></li></ul><p>语法说明：</p><p>[]里写链接文字，()里写链接地址, ()中的””中可以为链接指定title属性，title属性可加可不加。title属性的效果是鼠标悬停在链接上会出现指定的 title文字，链接地址与title前有一个空格。</p><p>代码：</p><pre class="line-numbers language-bash"><code class="language-bash">欢迎阅读 <span class="token punctuation">[</span>择势勤<span class="token punctuation">]</span><span class="token punctuation">(</span>https://www.jianshu.com/u/16d77399d3a7 <span class="token string">"择势勤"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>显示效果：</p><p>欢迎阅读 <a href="https://www.jianshu.com/u/16d77399d3a7">择势勤</a></p><ul><li><strong>参考式</strong></li></ul><p>参考式超链接一般用在学术论文上面，或者另一种情况，如果某一个链接在文章中多处使用，那么使用引用 的方式创建链接将非常好，它可以让你对链接进行统一的管理。</p><p>语法说明：<br> 参考式链接分为两部分，文中的写法 [链接文字][链接标记]，在文本的任意位置添加[链接标记]:链接地址。</p><p>如果链接文字本身可以做为链接标记，你也可以写成[链接文字][]<br> [链接文字]：链接地址的形式，见代码的最后一行。</p><p>代码：</p><pre class="line-numbers language-ruby"><code class="language-ruby">我经常去的几个网站<span class="token punctuation">[</span><span class="token constant">Google</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>、<span class="token punctuation">[</span><span class="token constant">Leanote</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>。<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token symbol">:http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>google<span class="token punctuation">.</span>com <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token symbol">:http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>leanote<span class="token punctuation">.</span>com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>显示效果：</p><p>我经常去的几个网站<a href="https://links.jianshu.com/go?to=http://www.google.com">Google</a>、<a href="https://links.jianshu.com/go?to=http://www.leanote.com">Leanote</a>。</p><ul><li><strong>注脚</strong></li></ul><p>语法说明：</p><p>在需要添加注脚的文字后加上脚注名字[^注脚名字],称为加注。 然后在文本的任意位置(一般在最后)添加脚注，脚注前必须有对应的脚注名字。</p><p>注意：经测试注脚与注脚之间必须空一行，不然会失效。成功后会发现，即使你没有把注脚写在文末，经Markdown转换后，也会自动归类到文章的最后。</p><p>代码：</p><pre class="line-numbers language-css"><code class="language-css">使用 Markdown[^<span class="token number">1</span>]可以效率的书写文档, 直接转换成 HTML[^<span class="token number">2</span>]。[^<span class="token number">1</span>]<span class="token punctuation">:</span>Markdown是一种纯文本标记语言[^<span class="token number">2</span>]<span class="token punctuation">:</span>HyperText Markup Language 超文本标记语言<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>显示效果：</p><p>使用 Markdown[<a href="#fn1">1]</a>可以效率的书写文档, 直接转换成 HTML[<a href="#fn2">2]</a>。</p><p>注：脚注自动被搬运到最后面，请到文章末尾查看，脚注后方的链接可以直接跳转回到加注的地方。</p><ul><li><strong>锚点（页内超链接）</strong></li></ul><p>网页中，锚点其实就是页内超链接，也就是链接本文档内部的某些元素，实现当前页面中的跳转。比如我这里写下一个锚点，点击回到目录，就能跳转到目录。 在目录中点击这一节，就能跳过来。还有下一节的注脚。这些根本上都是用锚点来实现的，只支持在标题后插入锚点，其它地方无效。</p><p>代码：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">## 0. 目录{#index}</span>```显示效果：跳转到<span class="token punctuation">[</span>目录<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token comment" spellcheck="true">#index)</span>- **自动链接**语法说明： Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用<span class="token operator">&lt;</span><span class="token operator">></span>包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如：代码：``<span class="token variable"><span class="token variable">`</span>dart<span class="token operator">&lt;</span>http://example.com/<span class="token operator">></span>    <span class="token operator">&lt;</span>address@example.com<span class="token operator">></span><span class="token variable">`</span></span>``显示效果：<span class="token operator">&lt;</span><span class="token punctuation">[</span>http://example.com/<span class="token punctuation">]</span><span class="token punctuation">(</span>https://links.jianshu.com/go?to<span class="token operator">=</span>http%3A%2F%2Fexample.com%2F<span class="token punctuation">)</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token punctuation">[</span>address@example.com<span class="token punctuation">]</span><span class="token punctuation">(</span>https://links.jianshu.com/go?to<span class="token operator">=</span>mailto%3Aaddress%40example.com<span class="token punctuation">)</span><span class="token operator">></span><span class="token comment" spellcheck="true">### 2.6 无序列表、有序列表、定义型列表</span>- **无序列表**     使用 *，+，- 表示无序列表。   代码：``<span class="token variable"><span class="token variable">`</span>undefined* 无序列表项 一+ 无序列表项 二- 无序列表项 三<span class="token variable">`</span></span>`<span class="token variable"><span class="token variable">`</span>显示效果：- 无序列表项 一- 无序列表项 二- 无序列表项 三- **有序列表**有序列表则使用数字接着一个英文句点。 代码：<span class="token variable">`</span></span>`<span class="token variable"><span class="token variable">`</span>undefined1. 有序列表项 一2. 有序列表项 二3. 有序列表项 三<span class="token variable">`</span></span>`<span class="token variable"><span class="token variable">`</span>显示效果：1. 有序列表项 一2. 有序列表项 二3. 有序列表项 三- **定义型列表表**语法说明：<span class="token operator">></span> 定义型列表由名词和解释组成。一行写上定义，紧跟一行写上解释。解释的写法:紧跟一个缩进<span class="token punctuation">(</span>Tab<span class="token punctuation">)</span>代码<span class="token variable">`</span></span>`<span class="token variable"><span class="token variable">`</span>undefined<span class="token keyword">:</span>   轻量级文本标记语言（左侧有一个可见的冒号和四个不可见的空格）<span class="token variable">`</span></span>``显示效果：Markdown <span class="token keyword">:</span>   轻量级文本标记语言，可以转换成html，pdf等格式<span class="token comment" spellcheck="true">### 2.7 插入图像</span>语法中图片Alt的意思是如果图片因为某些原因不能显示，就用定义的图片Alt文字来代替图片。 图片Title则和链接中的Title一样，表示鼠标悬停与图片上时出现的文字。 Alt 和 Title 都不是必须的，可以省略，但建议写上。Markdown 语法：```xml<span class="token operator">&lt;</span>center<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span>--开始居中对齐--<span class="token operator">></span><span class="token operator">!</span><span class="token punctuation">[</span>GitHub <span class="token keyword">set</span> up<span class="token punctuation">]</span><span class="token punctuation">(</span>http://zh.mweb.im/asset/img/set-up-git.gif <span class="token string">"图片Title"</span><span class="token punctuation">)</span>格式: <span class="token operator">!</span><span class="token punctuation">[</span>图片Alt<span class="token punctuation">]</span><span class="token punctuation">(</span>图片地址 <span class="token string">"图片Title"</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>/center<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">!</span>--结束居中对齐--<span class="token operator">></span>```效果如下：<span class="token operator">!</span><span class="token punctuation">[</span>img<span class="token punctuation">]</span><span class="token punctuation">(</span>https:////upload-images.jianshu.io/upload_images/1496626-c3d52ee452341b61.png?imageMogr2/auto-orient/strip<span class="token operator">|</span>imageView2/2/w/310/format/webp<span class="token punctuation">)</span>GitHub <span class="token keyword">set</span> up<span class="token comment" spellcheck="true">### 2.8 多级引用</span>语法说明：引用需要在被引用的文本前加上<span class="token operator">></span>符号和空格，允许多层嵌套，也允许你偷懒只在整个段落的第一行最前面加上 <span class="token operator">></span> 。代码：``<span class="token variable"><span class="token variable">`</span>ruby<span class="token operator">>></span><span class="token operator">></span> 请问 Markdwon 怎么用？ - 小白<span class="token operator">>></span> 自己看教程！ - 愤青<span class="token operator">></span> 教程在哪？ - 小白<span class="token variable">`</span></span>``显示效果：<span class="token operator">></span> <span class="token operator">></span> <span class="token operator">></span> 请问 Markdwon 怎么用？ - 小白<span class="token operator">></span> <span class="token operator">></span> 自己看教程！ - 愤青<span class="token operator">></span> 教程在哪？ - 小白<span class="token comment" spellcheck="true">### 2.9 转义字符、字体、字号、颜色</span>- **转义字符**Markdown中的转义字符为\，转义的有：\ 反斜杠 ` 反引号 * 星号 _ 下划线 <span class="token punctuation">{</span><span class="token punctuation">}</span> 大括号 <span class="token punctuation">[</span><span class="token punctuation">]</span> 中括号 <span class="token punctuation">(</span><span class="token punctuation">)</span> 小括号  <span class="token comment" spellcheck="true"># 井号 + 加号 - 减号 . 英文句号 ! 感叹号</span>- **字体、字号、颜色**代码：```xml<span class="token operator">&lt;</span>font face<span class="token operator">=</span><span class="token string">"黑体"</span><span class="token operator">></span>我是黑体字<span class="token operator">&lt;</span>/font<span class="token operator">></span><span class="token operator">&lt;</span>font face<span class="token operator">=</span><span class="token string">"微软雅黑"</span><span class="token operator">></span>我是微软雅黑<span class="token operator">&lt;</span>/font<span class="token operator">></span><span class="token operator">&lt;</span>font face<span class="token operator">=</span><span class="token string">"STCAIYUN"</span><span class="token operator">></span>我是华文彩云<span class="token operator">&lt;</span>/font<span class="token operator">></span><span class="token operator">&lt;</span>font color<span class="token operator">=</span><span class="token string">"#0099ff"</span> size<span class="token operator">=</span><span class="token string">"12"</span> face<span class="token operator">=</span><span class="token string">"黑体"</span><span class="token operator">></span>黑体<span class="token operator">&lt;</span>/font<span class="token operator">></span><span class="token operator">&lt;</span>font color<span class="token operator">=</span><span class="token string">"gray"</span> size<span class="token operator">=</span><span class="token string">"5"</span><span class="token operator">></span>gray<span class="token operator">&lt;</span>/font<span class="token operator">></span><span class="token operator">&lt;</span>font color<span class="token operator">=</span><span class="token string">"#00ffff"</span> size<span class="token operator">=</span><span class="token string">"3"</span><span class="token operator">></span>null<span class="token operator">&lt;</span>/font<span class="token operator">></span>```显示效果：<span class="token operator">&lt;</span>font face<span class="token operator">=</span><span class="token string">"黑体"</span><span class="token operator">></span>我是黑体字<span class="token operator">&lt;</span>/font<span class="token operator">></span> <span class="token operator">&lt;</span>font face<span class="token operator">=</span><span class="token string">"微软雅黑"</span><span class="token operator">></span>我是微软雅黑<span class="token operator">&lt;</span>/font<span class="token operator">></span> <span class="token operator">&lt;</span>font face<span class="token operator">=</span><span class="token string">"STCAIYUN"</span><span class="token operator">></span>我是华文彩云<span class="token operator">&lt;</span>/font<span class="token operator">></span> <span class="token operator">&lt;</span>font color<span class="token operator">=</span><span class="token string">"#0099ff"</span> size<span class="token operator">=</span><span class="token string">"12"</span> face<span class="token operator">=</span><span class="token string">"黑体"</span><span class="token operator">></span>黑体<span class="token operator">&lt;</span>/font<span class="token operator">></span> <span class="token operator">&lt;</span>font color<span class="token operator">=</span><span class="token string">"gray"</span> size<span class="token operator">=</span><span class="token string">"5"</span><span class="token operator">></span>gray<span class="token operator">&lt;</span>/font<span class="token operator">></span> <span class="token operator">&lt;</span>font color<span class="token operator">=</span><span class="token string">"#00ffff"</span> size<span class="token operator">=</span><span class="token string">"3"</span><span class="token operator">></span>null<span class="token operator">&lt;</span>/font<span class="token operator">></span><span class="token comment" spellcheck="true">## 三、块语法讲解</span><span class="token comment" spellcheck="true">### 3.1 内容目录</span>在段落中填写 <span class="token punctuation">[</span>TOC<span class="token punctuation">]</span> 以显示全文内容的目录结构。``<span class="token variable"><span class="token variable">`</span>json<span class="token punctuation">[</span>TOC<span class="token punctuation">]</span><span class="token variable">`</span></span>``效果参见最上方的目录。<span class="token comment" spellcheck="true">### 3.2 代码块</span>对于程序员来说这个功能是必不可少的，插入程序代码的方式有两种，一种是利用缩进<span class="token punctuation">(</span>Tab<span class="token punctuation">)</span>, 另一种是利用”<span class="token variable"><span class="token variable">`</span>”符号（一般在ESC键下方）包裹代码。- **行内式**代码：<span class="token variable">`</span></span>`<span class="token variable"><span class="token variable">`</span>cppC语言里的函数 <span class="token variable">`</span></span>scanf<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token variable"><span class="token variable">`</span> 怎么使用？<span class="token variable">`</span></span>`<span class="token variable"><span class="token variable">`</span>显示效果：C语言里的函数 <span class="token variable">`</span></span>scanf<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token variable"><span class="token variable">`</span> 怎么使用？- **缩进式多行代码**缩进 4 个空格或是 1 个制表符一个代码区块会一直持续到没有缩进的那一行（或是文件结尾）。代码：<span class="token variable">`</span></span>``cpp<span class="token comment" spellcheck="true">#include &lt;stdio.h></span>int main<span class="token punctuation">(</span>void<span class="token punctuation">)</span><span class="token punctuation">{</span>    printf<span class="token punctuation">(</span><span class="token string">"Hello world\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>``<span class="token variable"><span class="token variable">`</span>显示效果：<span class="token variable">`</span></span>``cpp<span class="token comment" spellcheck="true">#include &lt;stdio.h></span>int main<span class="token punctuation">(</span>void<span class="token punctuation">)</span><span class="token punctuation">{</span>    printf<span class="token punctuation">(</span><span class="token string">"Hello world\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>``<span class="token variable"><span class="token variable">`</span>- **用六个<span class="token variable">`</span></span>包裹多行代码**代码：```cpp、、、include <span class="token operator">&lt;</span>stdio.h<span class="token operator">></span>int main<span class="token punctuation">(</span>void<span class="token punctuation">)</span><span class="token punctuation">{</span>printf<span class="token punctuation">(</span><span class="token string">"Hello world\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>、、、``<span class="token variable"><span class="token variable">`</span>**显示效果：**<span class="token variable">`</span></span>``cppinclude <span class="token operator">&lt;</span>stdio.h<span class="token operator">></span>int main<span class="token punctuation">(</span>void<span class="token punctuation">)</span><span class="token punctuation">{</span>printf<span class="token punctuation">(</span><span class="token string">"Hello world\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>```<span class="token comment" spellcheck="true">### 3.3 流程图</span>编辑自有道云笔记，代码：~~~go``<span class="token variable"><span class="token variable">`</span>graph LRA--<span class="token operator">></span>B<span class="token variable">`</span></span>`<span class="token variable"><span class="token variable">`</span><span class="token variable">`</span></span>`<span class="token variable"><span class="token variable">`</span>sequenceDiagramA-<span class="token operator">>></span>B: How are you?B-<span class="token operator">>></span>A: Great<span class="token operator">!</span><span class="token variable">`</span></span>`<span class="token variable"><span class="token variable">`</span>~~~显示效果：<span class="token variable">`</span></span>`<span class="token variable"><span class="token variable">`</span>phpgraph LRA--<span class="token operator">></span>B<span class="token variable">`</span></span>`<span class="token variable"><span class="token variable">`</span><span class="token variable">`</span></span>`<span class="token variable"><span class="token variable">`</span>rustsequenceDiagramA-<span class="token operator">>></span>B: How are you?B-<span class="token operator">>></span>A: Great<span class="token operator">!</span><span class="token variable">`</span></span>``<span class="token comment" spellcheck="true">### 3.4 表格</span>语法说明：不管是哪种方式，第一行为表头，第二行分隔表头和主体部分，第三行开始每一行为一个表格行。 列于列之间用管道符<span class="token operator">|</span>隔开。原生方式的表格每一行的两边也要有管道符。 第二行还可以为不同的列指定对齐方向。默认为左对齐，在-右边加上:就右对齐。 <span class="token variable"><span class="token variable">`</span>-<span class="token variable">`</span></span> 左对齐， <span class="token variable"><span class="token variable">`</span>:-:<span class="token variable">`</span></span> 中心对齐，<span class="token variable"><span class="token variable">`</span>-:<span class="token variable">`</span></span> 右对齐表格代码：``<span class="token variable"><span class="token variable">`</span>ruby<span class="token operator">|</span>学号<span class="token operator">|</span>姓名<span class="token operator">|</span>序号<span class="token operator">|</span><span class="token operator">|</span>-<span class="token operator">|</span>-<span class="token operator">|</span>-<span class="token operator">|</span><span class="token operator">|</span>小明明<span class="token operator">|</span>男<span class="token operator">|</span>5<span class="token operator">|</span><span class="token operator">|</span>小红<span class="token operator">|</span>女<span class="token operator">|</span>79<span class="token operator">|</span><span class="token operator">|</span>小陆<span class="token operator">|</span>男<span class="token operator">|</span>192<span class="token operator">|</span><span class="token variable">`</span></span>``原生方式写表格： <span class="token operator">&lt;</span>center<span class="token operator">></span><span class="token operator">|</span> 学号   <span class="token operator">|</span> 姓名 <span class="token operator">|</span> 序号 <span class="token operator">|</span><span class="token operator">|</span> ------ <span class="token operator">|</span> :--: <span class="token operator">|</span> ---: <span class="token operator">|</span><span class="token operator">|</span> 小明明 <span class="token operator">|</span>  男  <span class="token operator">|</span>    5 <span class="token operator">|</span><span class="token operator">|</span> 小红   <span class="token operator">|</span>  女  <span class="token operator">|</span>   79 <span class="token operator">|</span><span class="token operator">|</span> 小陆   <span class="token operator">|</span>  男  <span class="token operator">|</span>  192 <span class="token operator">|</span><span class="token operator">&lt;</span>/center<span class="token operator">></span><span class="token comment" spellcheck="true">### 3.5 LaTeX 公式</span>- **表示行内公式**代码：``<span class="token variable"><span class="token variable">`</span><span class="token function">bash</span>质能守恒方程可以用一个很简洁的方程式 <span class="token variable">`</span></span><span class="token variable">$E</span> <span class="token operator">=</span> m c^2 $<span class="token variable"><span class="token variable">`</span>来表达。<span class="token variable">`</span></span>`<span class="token variable"><span class="token variable">`</span>显示效果：质能守恒方程可以用一个很简洁的方程式 <span class="token variable">`</span></span><span class="token variable">$E</span> <span class="token operator">=</span> m c^2 $<span class="token variable"><span class="token variable">`</span>来表达。- **表示整行公式**   大部分的浏览器支持的<span class="token variable">`</span></span>`<span class="token variable"><span class="token variable">`</span>ruby$$ 公式 $$<span class="token variable">`</span></span>`<span class="token variable"><span class="token variable">`</span>有道云笔记 使用格式，~~~go<span class="token variable">`</span></span>`<span class="token variable"><span class="token variable">`</span>mathE <span class="token operator">=</span> mc^2<span class="token variable">`</span></span>`<span class="token variable"><span class="token variable">`</span>~~~块级公式：~~~go<span class="token variable">`</span></span>``mathx <span class="token operator">=</span> \dfrac<span class="token punctuation">{</span>-b \pm \sqrt<span class="token punctuation">{</span>b^2 - 4ac<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span>2a<span class="token punctuation">}</span> <span class="token operator">&lt;</span>/stdio.h<span class="token operator">></span><span class="token operator">&lt;</span>/stdio.h<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-math"><code class="language-math">[\frac{1}{\Bigl(\sqrt{\phi \sqrt{5}}-\phi\Bigr) e^{\frac25 \pi}} =1+\frac{e^{-2\pi}} {1+\frac{e^{-4\pi}} {1+\frac{e^{-6\pi}}{1+\frac{e^{-8\pi}} {1+\ldots} } } }]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><del>~</del></p><p>显示效果：</p><pre class="line-numbers language-math"><code class="language-math">x = \dfrac{-b \pm \sqrt{b^2 - 4ac}}{2a} <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-math"><code class="language-math">[\frac{1}{\Bigl(\sqrt{\phi \sqrt{5}}-\phi\Bigr) e^{\frac25 \pi}} =1+\frac{e^{-2\pi}} {1+\frac{e^{-4\pi}} {1+\frac{e^{-6\pi}}{1+\frac{e^{-8\pi}} {1+\ldots} } } }]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>访问 <a href="https://links.jianshu.com/go?to=https://math.meta.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference">MathJax</a> 参考更多使用方法。</p><h3 id="3-6-分隔线"><a href="#3-6-分隔线" class="headerlink" title="3.6 分隔线"></a>3.6 分隔线</h3><p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p><p>代码：</p><pre class="line-numbers language-undefined"><code class="language-undefined">* * *********- - ------------<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>显示效果都一样：</p><hr><hr><hr><hr><hr><h3 id="3-7-HTML-原始码"><a href="#3-7-HTML-原始码" class="headerlink" title="3.7 HTML 原始码"></a>3.7 HTML 原始码</h3><p>在代码区块里面， &amp; 、 &lt; 和 &gt; 会自动转成 HTML 实体，这样的方式让你非常容易使用 Markdown 插入范例用的 HTML 原始码，只需要复制贴上，剩下的 Markdown 都会帮你处理，例如：</p><p><strong>代码：</strong></p><pre class="line-numbers language-xml"><code class="language-xml">第一个例子：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>© 2004 Foo Corporation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>第二个例子：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span> <span class="token attr-name">rowspan</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>值班人员<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>星期一<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>星期二<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>星期三<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>李强<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>张明<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>王平<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>显示效果：</p><p>第一个例子：<br> </p><div class="footer"><br> © 2004 Foo Corporation<br> </div><p></p><p>第二个例子：</p><center><table> <tbody><tr> <th rowspan="2">值班人员</th> <th>星期一</th> <th>星期二</th> <th>星期三</th> </tr> <tr> <td>李强</td> <td>张明</td> <td>王平</td> </tr> </tbody></table></center><h3 id="3-8-特殊字符"><a href="#3-8-特殊字符" class="headerlink" title="3.8 特殊字符"></a>3.8 特殊字符</h3><center><table><thead><tr><th align="center">特殊字符</th><th align="center">描述</th><th align="center">字符的代码</th></tr></thead><tbody><tr><td align="center"></td><td align="center">空格符</td><td align="center"><code> </code></td></tr><tr><td align="center">&lt;</td><td align="center">小于号</td><td align="center"><code>&lt;</code></td></tr><tr><td align="center">&gt;</td><td align="center">大于号</td><td align="center"><code>&gt;</code></td></tr><tr><td align="center">&amp;</td><td align="center">和号</td><td align="center"><code>&amp;</code></td></tr><tr><td align="center">￥</td><td align="center">人民币</td><td align="center"><code>¥</code></td></tr><tr><td align="center">©</td><td align="center">版权</td><td align="center"><code>©</code></td></tr><tr><td align="center">®</td><td align="center">注册商标</td><td align="center"><code>®</code></td></tr><tr><td align="center">°C</td><td align="center">摄氏度</td><td align="center"><code>°C</code></td></tr><tr><td align="center">±</td><td align="center">正负号</td><td align="center"><code>±</code></td></tr><tr><td align="center">×</td><td align="center">乘号</td><td align="center"><code>×</code></td></tr><tr><td align="center">÷</td><td align="center">除号</td><td align="center"><code>÷</code></td></tr><tr><td align="center">²</td><td align="center">平方（上标²）</td><td align="center"><code>²</code></td></tr><tr><td align="center">³</td><td align="center">立方（上标³）</td><td align="center"><code>³</code></td></tr></tbody></table></center><p>本文来源转载，已获作者授权</p><p>作者：择势勤<br>链接：<a href="https://www.jianshu.com/p/ebe52d2d468f">https://www.jianshu.com/p/ebe52d2d468f</a><br>来源：简书</p>]]></content>
      
      
      <categories>
          
          <category> MarkDown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
